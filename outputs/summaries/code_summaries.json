{
  "BeanBuilder": "() ; } }( String [ ]= (String[]) map.get(descriptor.getName()); if (writeMethod.getParameterTypes()[0].getEnumConstants(){ // Skip the setters(writeMethod.getParameterTypes()[0].getEnumConstants() == null) writeMethod.invoke(bean,} catch (IllegalAccessException e)throw new IllegalArgumentException(e.getMessage() + \"+ \" and \"\nThis class depends on: java.beans.Introspector, java.beans.PropertyDescriptor, java.lang.reflect.Method, java.util.HashMap, java.util.Map\nImplements functionality through methods: build",
  "DateUtil": "@see DateUtil#currentlyInMonthRange(java.util.Date date, int firstMonth,@return / public static String@param years how many years@see DateUtil#currentlyInMonthRange(java.util.Date date, int firstMonth,int secondMonth) { return<strong>INCLUSIVELY</strong>, agnostic of the@see DateUtil#currentlyInMonthRange(java\nThis class depends on: java.text.SimpleDateFormat, java.util.Calendar, java.util.Date, java.util.GregorianCalendar\nImplements functionality through methods: yearsAgo, isInMonthRange, currentlyInMonthRange, getDateXyearsAgoFromNow, getSQLdateXyearsAgoFromNow, getDateXDaysAgoFromNow, getSQLdateXDaysAgoFromNow",
  "DBUtil": "@param conn @param ps @param@param conn @param ps @param@param conn @param ps @param@param conn @param ps @param@param conn @param ps@param ps @param@param ps @param@param conn @param ps@param ps @param@param conn @param@param ps @param@param ps @param@param conn @param@param conn @param\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, edu.ncsu.csc.itrust.dao.DAOFactory\nImplements functionality through methods: canObtainProductionInstance, closeConnection, getLastInsert",
  "EmailUtil": "@author Andy/ public class{ public void sendEmail(Email email){ factory.getFakeEmailDAO().sendEmailRecord(email); } public void{ factory.getFakeEmailDAO().sendEmailRecord(email); } public void{ factory.getFakeEmailDAO().sendEmailRecord(email); } public void{ factory.getFakeEmailDAO().sendEmailRecord(email); } public void{ factory.getFakeEmailDAO\nThis class depends on: edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: EmailUtil, sendEmail",
  "HtmlEncoder": "@param input String to check@return / public staticString input) { if (inputnull) return input; String str= input.replaceAll(\"<\", \"&lt;\");str = input.replaceAll(\">\", \"&gt;\");String str = input.replaceAll(\"<\", \"&gt;\");str = str.replaceAll(\">\", \"&lt;\");str = str.replaceAll(\">\", \"&gt;\"\nImplements functionality through methods: encode, URLOnSite",
  "Localization": "public static Localization instance(){ if(currentInstance==null){currentLocale = new Locale(\"en\",\"US\"); }currentLocale = new Locale(\"en\",\"US\");currentLocale = new Locale(\"en\",\"US\");currentLocale = new Locale(\"en\",\"US\"); }public static Localization instance(){ if(currentInstance==null){instance(){ if(currentInstance == null){instance(); } return currentInstance; }instance\nThis class depends on: java.util.Locale\nImplements functionality through methods: Localization, getCurrentLocale, instance",
  "Messages": "static final String= \"edu.ncsu.csc.itrust.messages\"; //$NON-NLS-1$System.out.println(resourceBundle.getString(BUNDLE_NAME,Localization.instance().getCurrentLocale()));System.out.println(resourceBundle.getString(BUNDLE_NAME,Localization.instance().getCurrentLocale()));System.out.println(resourceBundle.getString(BUNDLE_NAME));\nThis class depends on: java.util.MissingResourceException, java.util.ResourceBundle\nImplements functionality through methods: getString",
  "ParameterUtil": "@param params Map to convert@return converted Map@SuppressWarnings(unchecked) public static HashMap<String, String>@param params Map to convert@return converted Map@SuppressWarnings(unchecked) public static HashMap<String, String> convertMap(Map@param params Map to convert@return converted Map@SuppressWarnings(unchecked) public static HashMap<String, String> convertMap(Map@param params Map to convert@\nThis class depends on: java.util.HashMap, java.util.Map\nImplements functionality through methods: convertMap",
  "RandomPassword": "@author Andy / public classpublic static String getRandomPassword(int i)str = \"\"; for (int0; i < 10; i++)str += (char) (rand.nextInt(26) +str += (char) (rand.nextInt(26)+ 'a'); for (int i=0;i<10; i++) { strstr += (char) (rand.nextInt(26\nThis class depends on: java.util.Random\nImplements functionality through methods: getRandomPassword",
  "AddApptAction": "appt.getDate().after(new Timestamp(System.currentTimeMillis()))) { return \"Thedate of this Appointment (\"+appt.getDate()+\")return \"The scheduled date of\"+appt.getDate()+\") has already passed.\";return \"The scheduled date ofappt.getDate().after(new Timestamp(System.currentTimeMillis())) { return \"Theappt.getDate()+\nThis class depends on: java.sql.SQLException, java.sql.Timestamp, edu.ncsu.csc.itrust.beans.ApptBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.ApptDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.ApptBeanValidator\nImplements functionality through methods: AddApptAction, addAppt, getName",
  "AddERespAction": "@param p bean containing the@throws FormValidationException @throws ITrustException @throws@throws ITrustException @throws FormValidationException @throws@throws ITrustException @throws ITrustException @throws@throws FormValidationException @throws ITrustException @throws@throws ITrustException @throws ITrustException @throws@throws ITrustException @throws ITrustException @throws@throws ITrustException @throws ITrustException @throws@throws\nThis class depends on: edu.ncsu.csc.itrust.RandomPassword, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.AddPersonnelValidator\nImplements functionality through methods: AddERespAction, add",
  "AddHCPAction": "the new user. @paramthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throws\nThis class depends on: edu.ncsu.csc.itrust.RandomPassword, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.AddPersonnelValidator\nImplements functionality through methods: AddHCPAction, add",
  "AddOfficeVisitAction": ". add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean. add ( new OfficeVisitBean; transDAO . add (\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: AddOfficeVisitAction, addEmptyOfficeVisit, getAllOfficeVisits, getUserName",
  "AddPatientAction": "new UserBean(p);new UserBean(p);new UserBean(p); newnew UserBean(p); newnew UserBean(p); new UserBean(p);new UserBean(p); newnew UserBean(p); new UserBean(p);new UserBean(p); new UserBean(p);new UserBean(p); new UserBean(p);new UserBean(p); new\nThis class depends on: edu.ncsu.csc.itrust.RandomPassword, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.validate.AddPatientValidator\nImplements functionality through methods: AddPatientAction, addPatient",
  "AddPHAAction": "@param p bean containing thethe new user. @throws FormValidationException@throws iTrustException / public@param p bean containing thethe new user. @throws@throws iTrustException / public@param p bean containing thethe new user. @throws@throws iTrustException@param p bean containing thethe new user. @throws@throws iTrustException@param p bean containing thethe new user.\nThis class depends on: edu.ncsu.csc.itrust.RandomPassword, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.AddPersonnelValidator\nImplements functionality through methods: AddPHAAction, add",
  "AddRemoteMonitoringDataAction": "( int glucoseLevel) throws DBException,( int glucoseLevel) throws DBException,( int glucoseLevel) throws( int glucoseLevel) throws( int glucoseLevel) throws DBException,( int glucoseLevel) throws( int glucoseLevel) throws( int glucoseLevel) throws( int glucoseLevel) throws DBException,( int glucoseLevel) throws\nThis class depends on: edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator\nImplements functionality through methods: AddRemoteMonitoringDataAction, getPatientName",
  "AddUAPAction": "@param p bean containing thethe new user.@throws iTrustException @throws FormValidationException @throws@throws iTrustException @throwsthe new user. @throwsthe new user. @throws@throws iTrustException @throws FormValidationException @throws@throws iTrustException @throwsthe new user. @throwsthe new user. @throwsthe new user. @throwsthe new user. @throws@throws\nThis class depends on: edu.ncsu.csc.itrust.RandomPassword, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.AddPersonnelValidator\nImplements functionality through methods: AddUAPAction, add",
  "ChangeSessionTimeoutAction": "public void changeSessionTimeout(String minuteString) throws{ if (accessDAO.getSessionTimeoutMins() <0) throw new FormValidationException(\"Must bebe a number greater than@author Andy Meneely / public{ return accessDAO.getSessionTimeoutMins(); }{ return accessDAO.getSessionTimeoutMins(); }{ return accessDAO.getSessionTimeoutMins(); }@author Andy Mene\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AccessDAO, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: ChangeSessionTimeoutAction, changeSessionTimeout, getSessionTimeout",
  "ChronicDiseaseRiskAction": "{ @link ChronicDiseaseRiskAction} @class{ @link ChronicDiseaseRiskAction} @class{ @link ChronicDiseaseRiskAction} @class ChronicDiseaseRiskAction{ @link ChronicDiseaseRiskAction} @class ChronicDiseaseRiskAction{ @link ChronicDiseaseRiskAction} @class ChronicDiseaseRiskAction{ @link ChronicD\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator, edu.ncsu.csc.itrust.risk.RiskChecker\nImplements functionality through methods: getPatientID, getUserName, getDiseasesAtRisk",
  "DeclareHCPAction": "@param hcpStr The HCP's MID@throws iTrustException @author Andy Meneely@throws iTrustException @author Andy Meneely@throws iTrustException @author Andy Meneely /@throws iTrustException @author Andy Meneely@param hcpStr The HCP's MID@throws iTrustException @author Andy Meneely@throws iTrustException @author\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: DeclareHCPAction, getDeclaredHCPS, declareHCP, undeclareHCP",
  "DrugInteractionAction": "() { if (drugInt.setTransactionType(transactionType); } else ifdrugInt.setTransactionType(transactionType); } else ifdrugInt.setTransactionType(transactionType); } else ifdrugInt.setTransactionType(transactionType); } else ifdrugInt.setTransactionType(transactionType); } else ifdrugInt.setTransactionType(transactionType); } else if\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.beans.DrugInteractionBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.DrugInteractionValidator\nImplements functionality through methods: DrugInteractionAction, reportInteraction, deleteInteraction, getInteractions",
  "EditApptTypeAction": "Edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator\n\nCode: EditApptTypeAction\nCode,Edu.ncsu.csc.itrust.action.EditApptTypeAction, edu.ncsu.csc.itrust.action.EditApptTypeAction, edu.ncsu.csc.itrust.action.EditAppt\nThis class depends on: java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.beans.ApptTypeBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator\nImplements functionality through methods: EditApptTypeAction, getApptTypes, addApptType, editApptType, getDurationByType",
  "EditHealthHistoryAction": "() ; this . hrDAO; this . authDAO .; this . transDAO .; this . hrDAO .; this . authDAO .; this . transDAO .; this . authDAO .; this . hrDAO .; this . hrDAO .; this . authDAO .; this . hrDAO .; this . hrDAO .; this . authDAO .; this . hr\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.HealthRecord, edu.ncsu.csc.itrust.beans.forms.HealthRecordForm, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.HealthRecordFormValidator\nImplements functionality through methods: getPatientName, getAllHealthRecords",
  "EditMonitoringListAction": "{ transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING,return rmDAO.removePatientToList(patientMID, loggedInMID); }@throws DBException / public void{ transDAO.logTransaction(TransactionType.TELEMEDICINE_MONITORING, loggedInMID, patientMID, \"remove\");return rmDAO.removePatientToList(patientMID,\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: EditMonitoringListAction, addToList, removeFromList, isPatientInList, getPatientName",
  "EditOfficeVisitAction": "import edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction; importimport edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction; importimport edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction; importimport edu.ncsu.csc.itrust.action.base.\nThis class depends on: java.text.ParseException, java.text.SimpleDateFormat, java.util.Arrays, java.util.Date, java.util.List, edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.HospitalBean, edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.beans.MedicationBean, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.DrugInteractionBean, edu.ncsu.csc.itrust.beans.AllergyBean, edu.ncsu.csc.itrust.beans.PrescriptionReportBean, edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AllergyDAO, edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO, edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO, edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO, edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator\nImplements functionality through methods: getOfficeVisit, getLabProcedures, getHospitals, updateInformation, hasInteraction, isAllergyOnList, makeEmailApp",
  "EditPatientAction": "@param pidString The MID ofthis action. @throws@paramthethe patient being edited. @paramthethethe patient beingthe user who is authorizingthe action. @paramthethethethe patient being edited. @paramthe user who is authorizing@param pidString The MID ofthe action. @param pidString Thethe MID of the@param\nThis class depends on: java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.PatientValidator, edu.ncsu.csc.itrust.EmailUtil\nImplements functionality through methods: EditPatientAction, updateInformation, getPatient, editMessageFilter",
  "EditPersonnelAction": "() { if () { throw new FormValidationException) ; } }) ; } public void( ) {( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ;\nThis class depends on: edu.ncsu.csc.itrust.action.base.PersonnelBaseAction, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.PersonnelValidator\nImplements functionality through methods: EditPersonnelAction, editMessageFilter",
  "EditPHRAction": "import edu.ncsu.csc.itrust.action.base.PatientBaseAction; importimport edu.ncsu.csc.itrust.action.base.PatientBaseAction; importimport edu.ncsu.csc.itrust.action.base.PatientBaseAction; importimport edu.ncsu.csc.itrust.action.base.\nThis class depends on: java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.beans.AllergyBean, edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.FamilyMemberBean, edu.ncsu.csc.itrust.beans.HealthRecord, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AllergyDAO, edu.ncsu.csc.itrust.dao.mysql.FamilyDAO, edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO, edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator, edu.ncsu.csc.itrust.risk.RiskChecker, edu.ncsu.csc.itrust.validate.AllergyBeanValidator\nImplements functionality through methods: updateAllergies, getPatient, getAllergies, getFamily, getAllHealthRecords, getAllOfficeVisits, getCompleteOfficeVisit, getDiseasesAtRisk, doesFamilyMemberHaveHighBP, doesFamilyMemberHaveHighCholesterol, doesFamilyMemberHaveDiabetes, doesFamilyMemberHaveCancer, doesFamilyMemberHaveHeartDisease, isFamilyMemberSmoker, getFamilyMemberCOD",
  "EditPrescriptionAction": "public void editPrescription(PrescriptionBean pres) throws{ if (this.ovDAO == null){ this.ovDAO.editPrescription(pres); } else {{ this.ovDAO.editPrescription(pres); } }{ this.ovDAO.editPrescription(pres); }{ this.ovDAO.editPrescription(pres); }{ this.ovDAO.editPrescription(pres); }\nThis class depends on: edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: EditPrescriptionAction, editPrescription",
  "EditRepresentativesAction": "@param pidString The id of@throws iTrustException / public List<PatientBean>@throws iTrustException / public List<PatientBean>@throws iTrustException / public List<PatientBean>@throws iTrustException / public List<PatientBean>@throws iTrustException / public List<PatientBean>@throws iTrustException / public List<PatientBean>@throws iTrustException\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: getRepresented, addRepresentative, removeRepresentative",
  "EmergencyReportAction": "{ public EmergencyReportAction ( ){ super ( ) ;( ) ; } public( ) { this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( ) ; this .( )\nThis class depends on: java.util.ArrayList, java.util.List, java.util.Calendar, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.AllergyBean, edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AllergyDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.enums.PrescriptionAlerts, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.beans.ProcedureBean\nImplements functionality through methods: EmergencyReportAction, getPatientName, getPatientAge, getPatientGender, getPatientEmergencyContact, getBloodType, getAllergies, getCurrentPrescriptions, getWarningDiagnoses, getImmunizations",
  "GenerateCalendarAction": "appointments appearing on theAppointmentBean @paramAppointmentBean @return the send requestappointments appearing on theAppointmentBean @return theAppointmentBean @paramAppointmentBean @paramAppointmentBean @param AppointmentBean @paramAppointmentBean @param AppointmentBean @param AppointmentBeanAppointmentBean @param AppointmentBean @param AppointmentBeanAppointmentBean @param AppointmentBean\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.action.EditApptTypeAction, edu.ncsu.csc.itrust.action.ViewMyApptsAction, edu.ncsu.csc.itrust.action.ViewMyRecordsAction, edu.ncsu.csc.itrust.beans.ApptBean, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.beans.LabProcedureBean, java.util.List, java.sql.SQLException, java.sql.Timestamp, java.util.ArrayList, java.util.Hashtable, java.util.Calendar\nImplements functionality through methods: GenerateCalendarAction, getSend, getConflicts, getApptsTable, getOfficeVisitsTable, getLabProceduresTable",
  "GetUserNameAction": "* \n * @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author laurenhayward* @author lauren\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: GetUserNameAction, getUserName",
  "GetVisitRemindersAction": ") ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static) ; } public static(\nThis class depends on: java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Calendar, edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.beans.ProcedureBean, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.beans.VisitFlag, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.enums.Gender\nImplements functionality through methods: getReminderType, getTypeName, GetVisitRemindersAction, getVisitReminders, testHPV, testHepA, testVaricella, testMeasles, testPolio, testPneumo, testHaemoFlu, testDipTet, testRotaVirus, testHepB",
  "LabProcHCPAction": "= new ArrayList<LabProcedureBean>(); List<OfficeVisitBean>= new ArrayList<OfficeVisitBean>(); List<LabProcedureBean>= new ArrayList<LabProcedureBean>(); List<LabProcedureBean>= new ArrayList<LabProcedureBean>(); List<LabProcedureBean>= new ArrayList<LabProcedureBean>(); List<LabProcedureBean>= new ArrayList<LabProcedureBean>();= new ArrayList<LabProcedureBean\nThis class depends on: java.util.List, java.util.ArrayList, edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.validate.LabProcedureValidator\nImplements functionality through methods: LabProcHCPAction, sortByLOINC, getLabProcForNextMonth, changePrivacy, checkAccess",
  "LabProcUAPAction": "{.( ) ;( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }\nThis class depends on: java.util.Arrays, java.util.List, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.validate.LabProcedureValidator\nImplements functionality through methods: LabProcUAPAction, updateProcedure, viewProcedures",
  "LoginFailureAction": "@class LoginFailureAction { public LoginFailureAction(DAOFactory) { this . authDAO( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ;\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: LoginFailureAction, recordLoginFailure, isValidForLogin",
  "ManageHospitalAssignmentsAction": "= new List<HospitalBean>(); List<HospitalBean> allHospitals=hospitalsDAO.getAllHospitals(); List<HospitalBean>hospitalsDAO.getAllHospitals(); List<HospitalBean> allHospitals=hospitalsDAO.getAllHospitals(); List<\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.beans.HospitalBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: ManageHospitalAssignmentsAction, getAvailableHospitals, getAssignedHospitals, assignHCPToHospital, removeHCPAssignmentToHospital, removeAllAssignmentsFromHCP, checkHCPID",
  "MonitorAdverseEventAction": "= new MessageBean(); this.messenger.setTransactionType(TransactionType.ADVERE_EVENT); this.messenger.setTransactionType(TransactionType.ADVERE_EVENT);this.messenger.setTransactionType(TransactionType.ADVERE_EVENT); this.messenger.setTransactionType(TransactionType.ADVERE_EVENT); this.messenger.setTransactionType(TransactionType.ADVERE_EVENT);\nThis class depends on: java.sql.SQLException, java.text.ParseException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.beans.AdverseEventBean, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.MessageBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: MonitorAdverseEventAction, getReports, getName, sendEmail, remove",
  "MyDiagnosisAction": "HCPDiagnosisBean hcpDiagnosisBean = new HCPDiagnosisBean();HCPDiagnosisBean hcpDiagnosisBean = new HCPDiagnosisBean();HCPDiagnosisBean hcpDiagnosisBean = new HCPDiagnosisBean();HCPDiagnosisBean hcpDiagnosisBean = newHCPDiagnosisBean ; HCPDiagnosisBean hcpDiag\nThis class depends on: java.io.Serializable, java.util.*, edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.beans.HCPDiagnosisBean, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.beans.MedicationBean, edu.ncsu.csc.itrust.beans.SurveyBean, edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.SurveyDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: MyDiagnosisAction, getDiagnoses, getHCPByDiagnosis, getPrescriptionsByHCPAndICD, compare",
  "PrescriptionReportAction": "@param pidString String pidString @param@param pidString String pidString @param@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String pidString@param pidString String\nThis class depends on: java.util.ArrayList, java.util.HashMap, java.util.List, java.util.Map, edu.ncsu.csc.itrust.ParameterUtil, edu.ncsu.csc.itrust.action.base.PatientBaseAction, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PrescriptionReportBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: representPatient, getAllOfficeVisits, getPatient",
  "ReferralManagementAction": "@throws DBException / public void@param r The current referral@throws DBException / public void@param r The current referral@throws DBException / public voidreferralDAO.getReferral(r); transDAO.logTransaction(TransactionType.UPDATE_REFERRAL, loggedInMID); transDAO.logTransaction(TransactionType.UPDATE_REFERRAL, loggedInMID); transDAO.logTransaction(TransactionType.UPDATE\nThis class depends on: edu.ncsu.csc.itrust.beans.ReferralBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.ReferralDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.exception.DBException, java.util.List\nImplements functionality through methods: ReferralManagementAction, sendReferral, updateReferral, getReferralsSentFromMe, getReferralsSentToMe",
  "ReportAdverseEventAction": "; this.personnelDAO = factory.createPersonnelDAO(); this.adverseEventDAO=factory.createAdverseEventDAO();this.adverseEventDAO=factory.createAdverseEventDAO(); this.transactionDAO=factory.createTransactionDAO(); this.transactionDAO.createTransactionDAO(); this.transactionDAO.createTransactionDAO(); this.transactionDAO.createTransactionDAO();this.adverseEventDAO.createTransactionDAO(); this.\nThis class depends on: java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.AdverseEventBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.AdverseEventValidator, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: ReportAdverseEventAction, ReportAdverseEventAction, sendMails, sendMail, addReport",
  "ResetPasswordAction": "@paramthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MID to checkthe user's MIDthe user's MID to check\nThis class depends on: java.util.Arrays, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.ValidationFormat\nImplements functionality through methods: ResetPasswordAction, checkMID, isMaxedOut, checkRole, checkAnswerNull, getSecurityQuestion",
  "SearchUsersAction": "try { if(\"\".equals(firstName)) firstName =return patientDAO.searchForPatientWithName(firstName, lastName); } catch{ System.out.println(\"DB Exception from SearchUsersAction\");return null; }searchForPersonnelWithName(String firstName, String lastName) {return patientDAO.searchForPersonnelWithName(firstName, lastName); } catch{ System.out.println(\"DB Exception from SearchUsersAction\");\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: SearchUsersAction, searchForPersonnelWithName, searchForPatientsWithName",
  "SendMessageAction": "{ public SendMessageAction ( )( ) { if () { throw new( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; } }( ) ;\nThis class depends on: java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.EmailUtil, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.MessageBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.MessageDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.EMailValidator, edu.ncsu.csc.itrust.validate.MessageValidator\nImplements functionality through methods: SendMessageAction, sendMessage, getPatientName, getPersonnelName, getMyRepresentees, getMyDLHCPs, getDLHCPsFor",
  "SetSecurityQuestionAction": "iTrustException / public SetSecurityQuestionAction(DAOFactory factory, long) throws Exception {SecurityQAValidator sqav = new SecurityQAValidator();SecurityQAValidator sqav = new SecurityQAValidator();SecurityQAValidator ( a ) throwsSecurityQAValidator ( a ) throwsSecurityQAValidator ( a ) throwsSecurityQAValidator ( a ) throwsSecurityQAValidator ( a ) throwsSecurityQAValidator ( a ) throwsSecurityQAValidator (\nThis class depends on: edu.ncsu.csc.itrust.beans.SecurityQA, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.SecurityQAValidator\nImplements functionality through methods: SetSecurityQuestionAction, updateInformation, retrieveInformation",
  "SurveyAction": "{ public void addPatientSurvey(OfficeVistBean officeVistBean,surveyBean, long visitID) throws DBException{ if (surveyBean.getVisitID() ==surveyBean, Calendar.getInstance().getTime()); //add to transactionlogTransaction(TransactionType.ADD_PATIENT_SURVEY, loggedInMID, 0L, \"officesurveyBean, Calendar.getInstance().getTime());\nThis class depends on: java.util.Calendar, edu.ncsu.csc.itrust.beans.SurveyBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.SurveyDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: SurveyAction, addSurvey",
  "UpdateCPTCodeListAction": "cptDAO = factory.getTransactionDAO(); this.cptDAO.getCPTCodes(); this.cptDAO.getCPTCodes();cptDAO.getCPTCodes(); this.cptDAO.getCPTCodes(); this.cptDAO.getCPTCodes(); this.cptDAO.getCPTCodes(); this.cptDAO.getCPTCodes(); this.cptDAO.getCPTCodes();\nThis class depends on: edu.ncsu.csc.itrust.beans.ProcedureBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.ProcedureBeanValidator\nImplements functionality through methods: UpdateCPTCodeListAction, addCPTCode, updateInformation",
  "UpdateHospitalListAction": ") { transDAO.logTransaction(TransactionType.UPDATE_HOSPITAL_LIST); } }@param performerID The MID of@throws FormValidationException / public void) { transDAO.logTransaction(TransactionType.UPDATE_HOSPITAL_LIST); }@param performerID The MID of@param performerID The MID of@param performerID The MID of@param\nThis class depends on: edu.ncsu.csc.itrust.beans.HospitalBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.HospitalBeanValidator\nImplements functionality through methods: UpdateHospitalListAction, addHospital, updateInformation",
  "UpdateICDCodeListAction": ") { if () { icdDAO .new ICDCode (diagnosis ) ;) ; icdDAO .new ICDCode (diagnosis )) ; icdDAO .new ICDCode ( diagnosis )) ; icdDAO .new ICDCode () ; icdDAO .new ICDCode ( diagnosis )) ; icdDAO .new ICD\nThis class depends on: edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator\nImplements functionality through methods: UpdateICDCodeListAction, addICDCode, updateInformation",
  "UpdateLOINCListAction": ") { if ( lblist.get(i).getTransactionType().equals(TransactionType.LOINC)) {= true; } else {= true; } }if (lDAO.get(i).getTransactionType().equals(TransactionType.LOINC)) { correctID =; } else { throw} } @throws FormValidationException, iTrustException@throws DBException / public String) { throw new( ) ;\nThis class depends on: java.util.List, edu.ncsu.csc.itrust.beans.LOINCbean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.LOINCDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.LOINCBeanValidator\nImplements functionality through methods: UpdateLOINCListAction, add, updateInformation",
  "UpdateNDCodeListAction": ") ; } catch ({ throw new DBException(); }@throws FormValidationException / public void) { transDAO .( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }\nThis class depends on: edu.ncsu.csc.itrust.beans.MedicationBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.FormValidationException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.validate.MedicationBeanValidator\nImplements functionality through methods: UpdateNDCodeListAction, addNDCode, updateInformation",
  "OfficeVisitBaseAction": "theof the patient. @parama String. @throws iTrustException Ifis not associated withthe patient in the database.@param input Thetheof the patient in thedatabase. @throws iTrustException If anyof the supplied parameters isis incorrect or there isis a DB problem. @throwsif any of the suppliedis incorrect or there isa DB problem. @throws iTrustExceptionthe\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: getOvID, encode",
  "PatientBaseAction": "{ @link{ @link PatientBaseAction}. @paramthe patient's ID. @throws iTrustExceptionthe patient's ID is incorrect.the patient's ID is incorrect.{ @link PatientBaseAction}. @paramthe patient's MID. @throws iTrustExceptionthe patient's ID is incorrect.the patient's ID is incorrect.@throws iTrustExceptionthe patient's MID is incorrect.@\nThis class depends on: edu.ncsu.csc.itrust.HtmlEncoder, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: PatientBaseAction, getPid",
  "PersonnelBaseAction": "{ @link PatientBaseAction } @class{ @link PatientBaseAction } @class{ @link PatientBaseAction } @class{ @link PatientBaseAction} @class{ @link PatientBaseAction} @class{ @link PatientBaseAction} @class PersonnelBaseAction{ @link PatientBaseAction} @class{ @link PatientBaseAction} @class{ @link Patient\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: PersonnelBaseAction, getPid",
  "AdverseEventBean": "getMID, getMID, setDrug, getId,getStatus,setStatus, getMID, getMID, getMID2, getMID3,getMID2,getMID2, getMID3, getMID4,getMID2,getMID2,getMID2, getMID3, getMID4,getMID2,getMID2, getMID3,\nImplements functionality through methods: getPrescriber, setPrescriber, getStatus, setStatus, getId, setId, getDate, setDate, getCode, setCode, getMID, setMID, getDrug, setDrug, getDescription, setDescription",
  "AllergyBean": "(Eclipse Hint: Use Source >A bean must only haveGetters and Setters (Eclipse Hint:Generate Getters and Setters (EclipseGenerate Getters and Setters (EclipseGenerate Getters and Setters (EclipseHint: Use Source > GenerateGenerate Getters and Setters(Eclipse Hint: Use Source >Generate Getters and Setters (EclipseGenerate Getters and\nThis class depends on: java.text.SimpleDateFormat, java.util.Date\nImplements functionality through methods: AllergyBean, getDescription, setDescription, getFirstFound, setFirstFound, getId, setId, toString, getPatientID, setPatientID, getFirstFoundStr",
  "ApptBean": "public void setApptType(String apptType)public void setApptType(String apptType)public void setApptType(String apptType) {public void setApptType(String apptType) {public void setApptType(String apptType)public void setApptType(String apptType)public void setApptType(String apptType) {public void set\nThis class depends on: java.sql.Timestamp\nImplements functionality through methods: getApptType, setApptType, getPatient, setPatient, getHcp, setHcp, getDate, setDate, getComment, setComment",
  "ApptTypeBean": "public void setDuration(int duration) {name = null;\n\tthis.setDuration(duration); }public void= null;} }\nImplements functionality through methods: ApptTypeBean, ApptTypeBean, getName, setName, getDuration, setDuration",
  "DiagnosisBean": "public static class DiagnosisBean\nPackage :{ public static void= new DiagnosisBean(String code, StringString description, String classification) {(String code) { this.icdCode =description; } public void setClassification(StringString classification) { this.classification =; } public static= new DiagnosisBean(String code,String description, String classification) {(String code) {\nImplements functionality through methods: DiagnosisBean, DiagnosisBean, getICDCode, setICDCode, getClassification, getDescription, setDescription, getFormattedDescription, getOvDiagnosisID, setOvDiagnosisID, setVisitID, getVisitID",
  "DrugInteractionBean": "@param firstDrug the firstDrug to@param secondDrug the secondDrug todescription / public void setDescription(Stringdescription/ public void setDescription(Stringdescription/ public void setDescription(String description)description/ public void setDescription(String description)description/ public void setDescription(String description)description/ public void setDescription(String description)description/ public void setDescription(String description)description/ public void setDescription(String description)\nImplements functionality through methods: getFirstDrug, setFirstDrug, getSecondDrug, setSecondDrug, getDescription, setDescription",
  "Email": "toList.get(i); if (toList.get(i) != null)return false; } @Override public{ assert false: \"hashCode notreturn false; } @Override public{ assert false: \"hashCode notreturn false; } @Override public{ assert false: \"hashCode notreturn false; } @Override public{ assert false: \"hashCode notreturn false; } @Override public{\nThis class depends on: java.sql.Timestamp, java.util.ArrayList, java.util.List\nImplements functionality through methods: getToList, setToList, getToListStr, getFrom, setFrom, getSubject, setSubject, getBody, setBody, getTimeAdded, setTimeAdded, equals, hashCode, toString",
  "FamilyMemberBean": "A bean for storingdata about Family Members. ) { return new FamilyMemberBean(getFirstName(),(Eclipse Hint: Use Source >Generate Getters and Setters \n) { return new FamilyMemberBean(getFirstName(),getLastName(), getMid(),public void setMid(long mid) {this.mid = mid; } public{ return new FamilyMemberBean(getFirstName(),get\nImplements functionality through methods: FamilyMemberBean, getFirstName, setFirstName, getLastName, setLastName, getFullName, getMid, setMid, getRelation, setRelation",
  "HCPDiagnosisBean": "public void incTreatmentSatisfaction() { return} public void incTreatmentSatisfaction() {} public void setTreatmentSat(int sat)} public void incTreatmentSatisfaction(int sat)} public void incTreatmentSatisfaction(int sat){ treatmentSat +=} public void setTreatmentSat(int sat)} public void incTreat\nThis class depends on: java.util.List\nImplements functionality through methods: HCPDiagnosisBean, getHCP, setHCP, getHCPName, setHCPName, getNumPatients, incNumPatients, getMedList, setMedList, getLabList, setLabList, getVisitSatisfaction, setVisitSat, getTreatmentSatisfaction, setTreatmentSat",
  "HCPLinkBean": "A bean's purpose isto store data between viewPrescriptionRecords.jspto store data betweenviewPrescriptionRecords.jsp and reportAdverseEvent.jsp\nA bean's purpose is toto store data between viewPrescriptionRecords.jspto store data between viewPrescriptionRecords.jspto store data between viewPrescriptionRecords.jspto store data between viewPrescriptionRecords.jspto store data between viewPrescriptionRecords.\nImplements functionality through methods: isChecked, setChecked, getCode, setCode, getPrescriberMID, setPrescriberMID, getDrug, setDrug",
  "HCPVisitBean": "HCPVisitBean, HCPVisitBean, HCPVisitBean,HCPVisitBean, HCPVisitBean, HCPVisitBean, HCPVisitBean, HCPVisitBean,HCPVisitBean, HCPVisitBean, HCPVisitBean, HCPVisitBean,HCPVisitBean, HCPVisitBean, HCPVisitBean, HCPVisitBean,HCPVisitBean, HCPVisitBean, HCPVisit\nImplements functionality through methods: HCPVisitBean, setHCPMID, getHCPMID, getHCPName, setHCPName, getHCPSpecialty, setHCPSpecialty, getHCPAddr, setHCPAddr, getOVDate, setOVDate, isDesignated, setDesignated",
  "HealthRecord": "} public class HealthRecord\nPackage :{} public void setBloodPressureD(int bloodPressureD){ this.bloodPressureD = bloodPressureD; }public void setBloodPressureDiastolic(int bloodPressure){ this.bloodPressureDiastolic= bloodPressureDiastolic; }public void setBloodPressureDiastolic(int blood\nThis class depends on: java.sql.Timestamp, java.util.Date\nImplements functionality through methods: HealthRecord, getBloodPressureD, setBloodPressureD, setBloodPressureSystolic, setBloodPressureDiastolic, getBloodPressureN, getBloodPressureSystolic, getBloodPressureDiastolic, setBloodPressureN, getBloodPressure, getCholesterolHDL, setCholesterolHDL, getCholesterolLDL, setCholesterolLDL, getCholesterolTri, setCholesterolTri, getTotalCholesterol, getDateRecorded, setDateRecorded, getHeight, setHeight, getPatientID, setPatientID, getPersonnelID, setPersonnelID, isSmoker, setSmoker, getWeight, setWeight, getBodyMassIndex",
  "HospitalBean": "* A bean's purpose isto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Littleto store data. Period. Little\nImplements functionality through methods: HospitalBean, HospitalBean, HospitalBean, getHospitalID, setHospitalID, getHospitalName, setHospitalName, equals, hashCode",
  "LabProcedureBean": "a laboratory procedure of aa patient / public void{ this.ovID = ovID; }a laboratory procedure of aprocedure of a patient /public void setStatus(String status) {status; } Digits of theformat nnnnn-n /public void setStatus(String status) {status; } Digits of theformat nnnnn-n / public void{ this.\nThis class depends on: java.sql.Timestamp\nImplements functionality through methods: LabProcedureBean, getPid, setPid, getProcedureID, setProcedureID, getLoinc, setLoinc, getStatus, setStatus, getCommentary, setCommentary, getResults, setResults, getOvID, setOvID, getTimestamp, setTimestamp, getRights, setRights, allow, restrict, statusComplete, statusPending, statusNotReceived",
  "LOINCbean": "formatting such as concatenating phonebeans together).  public class( ) { } public( ) { } public( ) { } public( ) { } public( ) { } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; this .( )\nImplements functionality through methods: LOINCbean, getLabProcedureCode, setLabProcedureCode, getComponent, setComponent, getKindOfProperty, setKindOfProperty, getTimeAspect, setTimeAspect, getSystem, setSystem, getScaleType, setScaleType, getMethodType, setMethodType",
  "MedicationBean": "{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean} @author Andy{ @link PrescriptionBean}{ @link Prescription\nImplements functionality through methods: MedicationBean, MedicationBean, MedicationBean, getNDCode, setNDCode, getDescription, setDescription, getNDCodeFormatted, equals, hashCode",
  "MessageBean": "public MessageBean ( ) {; }public void setRead(int read) {public void setRead(int read) {public void setRead(int read) {public void setRead(int read) {public void setRead(int read) {public void setRead(int read) {public void setRead(int read) {public void setRead(int read) {public void setRead(int\nThis class depends on: java.sql.Timestamp\nImplements functionality through methods: getTo, setTo, setMessageId, getParentMessageId, setParentMessageId, getFrom, setFrom, getSubject, setSubject, getBody, setBody, getSentDate, setSentDate, getRead, setRead",
  "OfficeVisitBean": "{ return visitID; } public{ return patientID; } public{ return hcpID; } public{ return hcpID; } public{ return} public long getHcpID() {return hcpID; } public{ return hcpID; } public{ return hcpID; } public{ return hcpID; } public{ return hcpID; } public{ return hcpID; }\nThis class depends on: java.text.ParseException, java.text.SimpleDateFormat, java.util.ArrayList, java.util.Date, java.util.List\nImplements functionality through methods: OfficeVisitBean, OfficeVisitBean, getID, getPatientID, getHcpID, getNotes, getVisitDate, getVisitDateStr, getDiagnoses, getPrescriptions, getProcedures, getVisitID, setDiagnoses, setHcpID, setPrescriptions, setNotes, setPatientID, setProcedures, setVisitDateStr, getHospitalID, setHospitalID",
  "OperationalProfile": "public void setNumPersonnelTransactions(int numPersonnelTransactions) {public void setNumPersonnelTransactions(int numPersonnelTransactions) {public void setNumPersonnelTransactions(int numPersonnelTransactions) {public void setNumPersonnelTransactions(int numPersonnelTransactions) {public void setNumPersonnelTransactions(int numPersonnelTransactions) { this.numPersonnelTransactionspublic void setNumPersonnelTransactions(int numPerson\nThis class depends on: java.util.HashMap, edu.ncsu.csc.itrust.enums.TransactionType\nImplements functionality through methods: OperationalProfile, getTotalCount, setTotalCount, getPersonnelCount, setPersonnelCount, getPatientCount, setPatientCount, setNumTotalTransactions, getNumTotalTransactions, getNumPatientTransactions, setNumPatientTransactions, getNumPersonnelTransactions, setNumPersonnelTransactions",
  "PatientBean": "= \"\"; private= \"\"; private= \"\"; private= \"\"; private= \"\";= \"\"; private= \"\";= \"\"; private= \"\";= \"\";= \"\";= \"\"; private= \"\"; private= \"\";= \"\"; private= \"\";= \"\";= \"\";= \"\";= \"\";= \"\"; private= \"\";\nThis class depends on: java.io.Serializable, java.text.ParseException, java.text.SimpleDateFormat, java.util.Date, edu.ncsu.csc.itrust.enums.BloodType, edu.ncsu.csc.itrust.enums.Ethnicity, edu.ncsu.csc.itrust.enums.Gender\nImplements functionality through methods: getMessageFilter, setMessageFilter, getBloodType, setBloodTypeStr, setBloodType, getCauseOfDeath, setCauseOfDeath, getCity, setCity, getDateOfBirthStr, getDateOfBirth, getDateOfDeath, setDateOfBirthStr, getAge, getAgeInDays, getAgeInWeeks, getDateOfDeathStr, setDateOfDeathStr, getEmail, setEmail, getEmergencyName, setEmergencyName, getEthnicity, setEthnicityStr, setEthnicity, getFatherMID, setFatherMID, getFullName, getFirstName, setFirstName, getGender, setGenderStr, setGender, getIcAddress1, setIcAddress1, getIcAddress2, setIcAddress2, getIcAddress3, getIcCity, setIcCity, getIcID, setIcID, getCreditCardType, setCreditCardType, getCreditCardNumber, setCreditCardNumber, getIcName, setIcName, getIcZip, getIcZip1, setIcZip1, getIcZip2, setIcZip2, getIcState, setIcState, getLastName, setLastName, getMID, setMID, getMotherMID, setMotherMID, getPhone, getPhone1, getPhone2, getPhone3, setPhone1, setPhone2, setPhone3, getSecurityAnswer, setSecurityAnswer, getSecurityQuestion, setSecurityQuestion, getState, setState, getStreetAddress1, setStreetAddress1, getStreetAddress2, setStreetAddress2, getStreetAddress3, getTopicalNotes, setTopicalNotes, getZip, getZip1, setZip1, getZip2, setZip2, getEmergencyPhone, getEmergencyPhone1, setEmergencyPhone1, getEmergencyPhone2, setEmergencyPhone2, getEmergencyPhone3, setEmergencyPhone3, getIcPhone, getIcPhone1, setIcPhone1, getIcPhone2, setIcPhone2, getIcPhone3, setIcPhone3, getConfirmPassword, setConfirmPassword, getPassword, setPassword",
  "PatientVisitBean": "PatientVisitBean(PatientBean patient) { this.patient=patient;} public void setLastOVDate(String lastOVDate)} public void setLastOVDate(String lastOVDate)public void setLastOVDate(String lastOVDate) {} public void setLastOVDate(String lastOVDate)} public void setLastOVDate(String lastOVDate)} public\nImplements functionality through methods: getLastOVDate, setLastOVDate, getLastOVDateM, setLastOVDateM, getLastOVDateD, setLastOVDateD, getLastOVDateY, setLastOVDateY, PatientVisitBean, getPatientName, setPatientName, getAddress1, setAddress1, getAddress2, setAddress2, getPatient, setPatient",
  "PersonnelBean": "public PersonnelBean ( ) {; } public PersonnelBean () { role = Role; } public; } public( ) { MID =; } public; } public; } public; } public; } public; } public; } public; } public; } public void; } public; } public; } public; } public; } public void; }\nThis class depends on: edu.ncsu.csc.itrust.enums.Role, java.io.Serializable, java.util.List\nImplements functionality through methods: getMessageFilter, setMessageFilter, getEmail, setEmail, getAMID, setAMID, getCity, setCity, getConfirmPassword, setConfirmPassword, getFirstName, setFirstName, getLastName, setLastName, getFullName, getMID, setMID, getPassword, setPassword, getPhone, getPhone1, setPhone1, getPhone2, setPhone2, getPhone3, setPhone3, getRole, setRole, getSecurityAnswer, setSecurityAnswer, getSecurityQuestion, setSecurityQuestion, getState, setState, getStreetAddress1, setStreetAddress1, getStreetAddress2, setStreetAddress2, getZip, getZip1, setZip1, getZip2, setZip2, getSpecialty, setSpecialty, compareTo, getIndexIn",
  "PrescriptionBean": "{ return medication.getId(); } public{ return medication.getVisitID(); } public{ return medication.getVisitID(); } public{ return medication.getVisitID(); } public{ return medication.getVisitID(); } public{ return medication.getVisitID(); } public{ return medication.getVisitID(); } public{ return medication.getVisitID(); }{ return medication\nThis class depends on: java.text.ParseException, java.text.SimpleDateFormat, java.util.Date\nImplements functionality through methods: PrescriptionBean, equals, hashCode, getDosage, setDosage, getEndDate, setEndDateStr, getInstructions, setInstructions, getMedication, setMedication, getStartDate, getStartDateStr, getEndDateStr, setStartDateStr, getVisitID, setVisitID, getId, setId",
  "PrescriptionReportBean": "@author Andy Meneely / publicPrescriptionReportBeanPrescriptionReportBeanPrescriptionReportBean(which\n * in turn containsBean), and an office visitBean), and an office visit{ return officeVisit; } publicPrescriptionReportBean(which\n * in turn containsBean), and an office visit{ return officeVisit; } publicPrescriptionReportBean(which\n * in turn\nImplements functionality through methods: PrescriptionReportBean, getPrescription, setPrescription, getOfficeVisit, setOfficeVisit",
  "ProcedureBean": "@param String / public String@param String / public String@param String / public String@param String@param String / publicpublic void setOvProcedureID(long id) {} public void setOvProcedureID(long id){ this.ovProcedureID = id; }@param String /public void setOvProcedureID(long id) {public void setOvProcedureID(long id)\nThis class depends on: java.sql.Date\nImplements functionality through methods: ProcedureBean, ProcedureBean, ProcedureBean, ProcedureBean, ProcedureBean, getCPTCode, setCPTCode, getDescription, setDescription, getHcpid, setHcpid, getAttribute, setAttribute, getOvProcedureID, setOvProcedureID, getDate, setDate",
  "ReferralBean": "public class ReferralBean\nPackage :public ReferralBean\nDescription ( ) {; } public( ReferralStatus status ) {; } public( ReferralStatus status ) {; } public( ReferralStatus status ) {; } public( ReferralStatus status ) {; } public( ReferralStatus status ) {status = status ; }public void setStatus(ReferralStatus status) {\nImplements functionality through methods: ReferralBean, equals, hashCode, getId, setId, getSenderID, setSenderID, getReceiverID, setReceiverID, getReferralDetails, setReferralDetails, getConsultationDetails, setConsultationDetails, getStatus, setStatus, getPatientID, setPatientID",
  "RemoteMonitoringDataBean": "public void setReporterRole(String reporterRole) {} public void setLoggedInMID(long loggedInMID){ this.reporterMID = loggedInMID; }public void setPatientMID(long patientMID) {public void setPatientMID(long patientMID) {public void setPatientMID(long patientMID)public void setPatientMID(long patient\nThis class depends on: java.sql.Timestamp\nImplements functionality through methods: RemoteMonitoringDataBean, RemoteMonitoringDataBean, getReporterMID, setReporterMID, getPatientMID, setLoggedInMID, getTime, setTime, getSystolicBloodPressure, setSystolicBloodPressure, getDiastolicBloodPressure, setDiastolicBloodPressure, getGlucoseLevel, setGlucoseLevel, getReporterRole, setReporterRole",
  "ReportRequestBean": "public void setRequestedDate(java.util.Date requestedDate) {} public void setApprovedDate(java.util.Date approvedDate){ this.approvedDate = approvedDate; }public void setViewedDate(java.util.Date viewedDate){ this.viewedDate = viewedDate; }public void setApprovedDate(java.util.Date viewedDate){ this.viewedDate = view\nThis class depends on: java.text.ParseException, java.text.SimpleDateFormat, java.util.Date, edu.ncsu.csc.itrust.Messages\nImplements functionality through methods: ReportRequestBean, setID, getID, setRequesterMID, getRequesterMID, setPatientMID, getPatientMID, setApproverMID, getApproverMID, setRequestedDate, setRequestedDateString, getRequestedDate, getRequestedDateString, setApprovedDate, setApprovedDateString, getApprovedDate, getApprovedDateString, setViewedDate, setViewedDateString, getViewedDate, getViewedDateString, setStatus, getStatus, setComment, getComment",
  "SecurityQA": "A bean must only haveGetters and Setters (Eclipse Hint:Generate Getters and Setters \nA bean must only haveGetters and Setters (Eclipse Hint:Generate Getters and Setters \nA bean must only haveGetters and Setters (Eclipse Hint:Generate Getters and Setters \nA bean must only haveGenerate Getters and Setters \nA bean must only have\nImplements functionality through methods: getQuestion, setQuestion, getAnswer, setAnswer, getConfirmAnswer, setConfirmAnswer",
  "SurveyBean": "public void setTreatmentSatisfaction(int treatmentSatisfaction) {} public void setTreatmentSatisfaction(int treatmentSatisfaction){ this.treatmentSatisfaction = treatmentSatisfaction; }public void setTreatmentSatisfaction(int treatmentSatisfaction) {{ this.treatmentSatisfaction = treatmentSatisfaction;} public void\nThis class depends on: java.text.ParseException, java.text.SimpleDateFormat, java.util.Date\nImplements functionality through methods: setVisitID, getVisitID, setSurveyDate, setSurveyDateString, getSurveyDate, getSurveyDateString, setWaitingRoomMinutes, getWaitingRoomMinutes, setExamRoomMinutes, getExamRoomMinutes, setVisitSatisfaction, getVisitSatisfaction, setTreatmentSatisfaction, getTreatmentSatisfaction",
  "SurveyResultBean": "String hcpCity; private String hcpState;public void setHCPHospitalID(String hcpHospitalID) {hcpHospitalID = hcpHospitalID; }public void setHCPHospitalID(String hcpHospitalID) {hcpHospitalID = hcpHospitalID; }public void setHCP\nImplements functionality through methods: setHCPMID, getHCPMID, setHCPFirstName, getHCPFirstName, setHCPLastName, getHCPLastName, setHCPaddress1, getHCPaddress1, setHCPaddress2, getHCPaddress2, setHCPcity, getHCPcity, setHCPstate, getHCPstate, setHCPzip, getHCPzip, setHCPspecialty, getHCPspecialty, setHCPhospital, getHCPhospital, setAvgWaitingRoomMinutes, getAvgWaitingRoomMinutes, setAvgExamRoomMinutes, getAvgExamRoomMinutes, setAvgVisitSatisfaction, getAvgVisitSatisfaction, setAvgTreatmentSatisfaction, getAvgTreatmentSatisfaction, setPercentSatisfactionResults, getPercentSatisfactionResults",
  "TransactionBean": "public class TransactionBean\nPackage :{ public TransactionBean\nPackage ( ){ return new TransactionBean\nPackage () ; } public TransactionBean\nPackageTransactionBean\nPackage ( ) {; } public void setTransactionTypesetTransactionType, setTransactionType, setTransactionID, setTransactionID\nDependencies:public void setTransactionID ( long{ this . transactionID =} public void setTransactionID () { this .\nThis class depends on: java.sql.Timestamp, edu.ncsu.csc.itrust.enums.TransactionType\nImplements functionality through methods: getRole, setRole, getAddedInfo, setAddedInfo, getLoggedInMID, setLoggedInMID, getSecondaryMID, setSecondaryMID, getTimeLogged, setTimeLogged, getTransactionType, setTransactionType, getTransactionID, setTransactionID",
  "EditOfficeVisitForm": "{ this.ovID = ovID; }public void{ this.hcpID = hcpID; }public String getAddImmunizationID() { returnpublic void setAddImmunizationID(String addImmunizationID) { this.addImmunizationIDpublic String getAddImmunizationID(String addImmunizationID) { this.addImmunizationIDpublic\nImplements functionality through methods: getAddDiagID, setAddDiagID, getAddLabProcID, setAddLabProcID, getAddMedID, setAddMedID, getAddProcID, setAddProcID, getAddImmunizationID, setAddImmunizationID, getNotes, setNotes, getOvID, setOvID, getRemoveLabProcID, setRemoveLabProcID, getRemoveDiagID, setRemoveDiagID, getRemoveMedID, setRemoveMedID, getRemoveProcID, setRemoveProcID, getRemoveImmunizationID, setRemoveImmunizationID, getVisitDate, setVisitDate, getHcpID, setHcpID, getPatientID, setPatientID, getHospitalID, setHospitalID, getDosage, setDosage, getEndDate, setEndDate, getInstructions, setInstructions, getStartDate, setStartDate, getCauseOfDeath, setCauseOfDeath",
  "HealthRecordForm": "String getWeight() { return weight;} publicString getBloodPressureN(String bloodPressureN) { this.bloodPressureN=String getBloodPressureN(String bloodPressureN) { this.bloodPressureN=String getBloodPressureN(String bloodPressureN) { this.bloodPressureN=String getBloodPressureN(String bloodPressureN)\nImplements functionality through methods: HealthRecordForm, getBloodPressureD, setBloodPressureD, getBloodPressureN, setBloodPressureN, getCholesterolHDL, setCholesterolHDL, getCholesterolLDL, setCholesterolLDL, getCholesterolTri, setCholesterolTri, getHeight, setHeight, getIsSmoker, setIsSmoker, getWeight, setWeight",
  "AdverseEventBeanLoader": "= new( ) ; for (rs = rs.getResultSet();rs = rs.getResultSet(); while (rs.next())rs.getString(\"PatientMID\")); adverseEvent.setMID(rs.getString(\"PatientMID\")); adverseEvent.setDrug(rs.getString(\"PresImmu\")); adverseEvent.setDate(rs.getTimestamp(\"TimeLogged\")); adverse\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.AdverseEventBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "AllergyBeanLoader": "public class AllergyBeanLoader { public( ) { return new; } public void( ResultSet rs ) throwsResultSet rs) throws SQLException {ResultSet rs = rs.getResultSet();rs.getLong(\"PatientID\")); if (rs.next()) { rs.setLong(\"PatientID\"));rs.getLong(\"PatientID\")); if (rs.next()) { rs.setLong(\"PatientID\")\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.AllergyBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "ApptBeanLoader": "public static voidloadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies,loadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies, loadSingle\nDependencies,loadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies,loadSingle\nDependencies, loadSingle\nDependencies, loadSingle\nDependencies,loadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies, loadSingle\nDependencies,\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.ApptBean\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "ApptTypeBeanLoader": "public static voidloadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies,loadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies, loadSingle\nDependencies,loadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies,loadSingle\nDependencies, loadSingle\nDependencies, loadSingle\nDependencies, loadSingle\nDependencies,loadList, loadParameters, loadSingle\nDependencies, loadSingle\nDependencies,\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.ApptTypeBean\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "BeanLoader": "@param <T> A type for@param <T> A type for@param <T> A type for@param <T> A type@param <T> A type@param <T> A type@param <T> A type@param <T> A type@param <T> A type@param <T> A type@param <T> A type@param <T> A\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List\n",
  "DiagnosisBeanLoader": "= new ArrayList<DiagnosisBean>();= new ArrayList<DiagnosisBean>(); if (loadOVDiagnosisID)= new ArrayList<DiagnosisBean>(); if (loadOVDiagnosisID)= new ArrayList<DiagnosisBean>(); if (loadOVDiagnosisID)= new ArrayList<DiagnosisBean>(); if (loadOVDiagnosisID)= new\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.DiagnosisBean\nImplements functionality through methods: DiagnosisBeanLoader, DiagnosisBeanLoader, loadList, loadSingle, loadParameters",
  "DrugInteractionBeanLoader": "public void loadMedicationBeans(ResultSet rs) throws{ if (rs.next()) { List<DrugInteractionBean>List<DrugInteractionBean> list = new ArrayList<DrugInteractionBean>();List<DrugInteractionBean> list = new ArrayList<DrugInteractionBean>();List<DrugInteractionBean> list = new ArrayList<DrugInteractionBean>();List<DrugInteractionBean> list = new ArrayList<\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.DrugInteractionBean\nImplements functionality through methods: DrugInteractionBeanLoader, loadList, loadSingle, loadParameters",
  "EmailBeanLoader": "loadSingle, loadList, loadParameters, loadSingle\nDependencies:loadList, loadParameters, loadSingle, loadSingle\nDependencies:loadList, loadParameters, loadSingle\nDependencies: loadList, loadSingle\nDependencies:loadList, loadParameters, loadSingle\nDependencies: loadList, loadSingle\nDependencies:loadList, loadParameters, loadSingle\nDependencies: loadSingle, loadSingle\nDependencies:loadList, loadParameters, load\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.Arrays, java.util.List, edu.ncsu.csc.itrust.beans.Email\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "FamilyBeanLoader": "public void loadSingle\nDependencies(PreparedStatement ps, ResultSetResultSet rs) throws SQLException {new IllegalStateException(\"unimplemented!\"); } public void) throws SQLException { throw; } public void loadSingle\nDependencies(PreparedStatementResultSet rs) throws SQLException {new SQLException(\"unimplemented!\"); } public void) throws SQLException { thrownew IllegalStateException(\"unimplemented!\"); } public void) throws SQLException { throw; } public void loadSingle\nDependencies\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.FamilyMemberBean\nImplements functionality through methods: FamilyBeanLoader, loadList, loadParameters, loadSingle",
  "HealthRecordsBeanLoader": "hr.setCholesterolTri(rs.getInt(\"CholesterolTri\")); hr.setBloodPressureN(rs.getInt(\"BloodPressureN\")); hr.setBloodPressureD(rs.getInt(\"BloodPressureD\")); hr.setBloodPressureN(rs.getInt(\"BloodPressureN\")); hr.setBloodPressureD(rs.getInt\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.HealthRecord\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "HospitalBeanLoader": "HospitalBean loadHospitalBean(ResultSet rs) throwsHospitalBean loadHospitalBean(ResultSet rs) throwsHospitalBean loadHospitalBean(ResultSet rs) throwsHospitalBean loadHospitalBean(ResultSet rs) throwsHospitalBean loadHospitalBean(ResultSet rs) throwsHospitalBean loadHospitalBean(\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.HospitalBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "LabProcedureBeanLoader": "loadList, loadSingle, loadParameters\nDependencies: List<LabProcedureBean> loadList,List<LabProcedureBean> loadList, List<LabProcedureBean> loadSingle, List<LabProcedureBean>List<LabProcedureBean> loadList, List<LabProcedureBean> loadSingle, List<LabProcedureBean>List<LabProcedureBean> loadList, List<LabProcedureBean> loadList,List<LabProcedureBean> load\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.LabProcedureBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "LOINCBeanLoader": "loadList, loadSingle, loadParameters, loadParameters\nDependencies:loadList, loadSingle, loadParameters, loadSingle, loadParameters,loadSingle, loadSingle, loadList, loadSingle, loadSingle,loadList, loadSingle, loadSingle, loadSingle, loadSingle,loadSingle, loadSingle, loadSingle, loadSingle,loadSingle, loadSingle, loadSingle,loadSingle, loadSingle, loadSingle, loadSingle\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.LOINCbean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "MedicationBeanLoader": "= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean>();= new ArrayList<MedicationBean\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.MedicationBean\nImplements functionality through methods: MedicationBeanLoader, loadList, loadSingle, loadParameters",
  "MessageBeanLoader": "loadList, loadParameters, loadSingle, loadSingle\nDependencies: List<MessageBean>List<MessageBean> loadList, List<MessageBean> loadSingle, List<MessageBean>List<MessageBean> loadList, List<MessageBean> loadSingle, List<MessageBean>List<MessageBean> loadList, List<MessageBean> loadList,List<MessageBean> loadSingle, List<MessageBean> loadList,\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.MessageBean\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "OfficeVisitLoader": "public void load () throws SQLException { throw; } public void; } public void) throws SQLException { throw; } public void) throws SQLException { throw; } public void) throws SQLException { throw; } public void) throws SQLException { throw; } public void) throws SQLException { throw; } public void) throws SQLException { throw; } public void) throws SQLException { throw; } public void\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.text.SimpleDateFormat, java.util.ArrayList, java.util.Date, java.util.List, edu.ncsu.csc.itrust.beans.OfficeVisitBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "OperationalProfileLoader": "loadParameters(PreparedStatement ps, OperationalProfile bean) throws{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.beans.OperationalProfile, edu.ncsu.csc.itrust.enums.TransactionType\nImplements functionality through methods: loadList, loadSingle",
  "PatientLoader": "p.setZip2(rs.getString(\"zip2\")); p.setCountry(rs.getString(\"Country\")); p.setCountry3(rs.getString(\"Country3\")); p.setCountry4(rs.getString(\"Country4\")); p.setCountry5(rs.getString(\"Country5\"));p.setCountry4(rs.getString(\"Country4\")); p.setCountry5(rs.\nThis class depends on: java.sql.Date, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.text.ParseException, java.text.SimpleDateFormat, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.PatientBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "PersonnelLoader": "p.setName(rs.getString(\"name\")); p.setEmail2((rs.getString(\"email2\"))); p.setSpecialty3((rs.getString(\"specialty3\"))); p.setSpecialty4((rs.getString(\"specialty4\"))); p.setSpecialty5((rs.getString(\"specialty5\")));p.setName(rs.getString(\"name\"));\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.enums.Role\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "PrescriptionBeanLoader": ". setLong(4, pres.getVisitID()); ps.setString(5,new java.sql.Date(pres.getStartDate().getTime())); ps.setLong(6,new java.sql.Date(pres.getEndDate().getTime())); ps.setString(7,. setLong(8, pres.getVisitID()); ps.setLong(9, pres.getVisitID());ps.set\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.text.SimpleDateFormat, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.PrescriptionBean\nImplements functionality through methods: PrescriptionBeanLoader, loadList, loadSingle, loadParameters",
  "PrescriptionReportBeanLoader": "PrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throwsPrescriptionReportBean loadSingle(ResultSet rs) throws SQLException\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.PrescriptionReportBean\nImplements functionality through methods: PrescriptionReportBeanLoader, loadList, loadSingle",
  "ProcedureBeanLoader": "ProcedureBeanLoader, ProcedureBeanLoader, loadList, loadSingle, loadParameters\nDependencies:ProcedureBeanLoader, loadList, loadSingle, loadParameters\nDependencies:ProcedureBeanLoader, loadList, loadSingle, loadParameters\nDependencies:ProcedureBeanLoader, loadList, loadSingle, loadParameters\nDependencies:java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.ProcedureBean\nImplements functionality through methods: ProcedureBeanLoader, ProcedureBeanLoader, loadList, loadSingle, loadParameters",
  "ReferralBeanLoader": ") ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps . setLong) ; ps .( ) ;( ) ;\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.ReferralBean, edu.ncsu.csc.itrust.beans.ReferralBean.ReferralStatus\nImplements functionality through methods: ReferralBeanLoader, loadList, loadSingle, loadParameters",
  "RemoteMonitoringDataBeanLoader": "loadSingle, loadList, loadParameters, loadSingle\nDependencies: List<RemoteMonitoringDataBean>List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();List<RemoteMonitoringDataBean> list = new ArrayList<RemoteMonitoringDataBean>();\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "ReportRequestBeanLoader": "ReportRequestBean loadSingle(ResultSet rs) throws(ResultSet rs) throws SQLException {(rs.next()) throws SQLException {(rs.next()) throws SQLException {(rs.next()) { if (rs.next()) {(rs.next()) { if (rs.next())(rs.next()) { if (rs.next()) {(rs.next()) { if (rs.next()) {(rs.next())\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.ReportRequestBean\nImplements functionality through methods: loadList, loadSingle, loadParameters",
  "SurveyLoader": "loadSingle, loadList, loadParameters, loadSingle\nDependencies:loadList, loadParameters, loadSingle, loadSingle\nDependencies:loadSingle, loadSingle\nDependencies: loadList, loadParameters, loadSingle\nDependencies:loadSingle, loadSingle\nDependencies: loadSingle, loadSingle\nDependencies: loadSingle,loadList, loadParameters, loadSingle\nDependencies: loadSingle, loadSingle\nDependencies:loadList, loadParameters, load\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.beans.SurveyBean\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "SurveyResultBeanLoader": "surveyResult.setHCPaddress3(rs.getString(\"address3\")); surveyResult.setHCPaddress4(rs.getString(\"address4\")); surveyResult.setHCPaddress5(rs.getString(\"address5\")); surveyResult.setHCPaddress6(rs.getString(\"address6\")); surveyResult.setHCPaddress7(rs.getString(\"address7\"));surveyResult.setHCP\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.SurveyResultBean\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "TransactionBeanLoader": "loadSingle(ResultSet rs) throws{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{ throw new IllegalStateException(\"unimplemented!\"); }{\nThis class depends on: java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.TransactionBean, edu.ncsu.csc.itrust.enums.TransactionType\nImplements functionality through methods: loadList, loadParameters, loadSingle",
  "AdverseEventsData": "= new ArrayList<AdverseEventBean>();@param name / public void@param codeName / public void@param codeName / public void@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName@param codeName / public void\nThis class depends on: java.io.Serializable, java.text.ParseException, java.text.SimpleDateFormat, java.util.Calendar, java.util.Date, java.util.LinkedList, java.util.List, java.util.Map, org.jfree.data.category.CategoryDataset, org.jfree.data.category.DefaultCategoryDataset, de.laures.cewolf.DatasetProduceException, de.laures.cewolf.DatasetProducer, de.laures.cewolf.links.CategoryItemLinkGenerator, de.laures.cewolf.tooltips.CategoryToolTipGenerator, edu.ncsu.csc.itrust.beans.AdverseEventBean\nImplements functionality through methods: produceDataset, hasExpired, getProducerId, generateLink, generateToolTip",
  "DAOFactory": "importimportimport edu.ncsu.csc.itrust.dao.mysql.CPTTypesDAO; import edu.ncsu.csc.itrust.dao.mysql.CPTTypesDAO; importimport edu.ncsu.csc.itrust.dao.mysql.CPTTypesDAO; importimport edu.ncsu.csc.itrust\nThis class depends on: java.sql.Connection, java.sql.SQLException, edu.ncsu.csc.itrust.dao.mysql.AccessDAO, edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO, edu.ncsu.csc.itrust.dao.mysql.AllergyDAO, edu.ncsu.csc.itrust.dao.mysql.ApptDAO, edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO, edu.ncsu.csc.itrust.dao.mysql.AuthDAO, edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO, edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO, edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO, edu.ncsu.csc.itrust.dao.mysql.FamilyDAO, edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO, edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO, edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO, edu.ncsu.csc.itrust.dao.mysql.LOINCDAO, edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO, edu.ncsu.csc.itrust.dao.mysql.MessageDAO, edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO, edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO, edu.ncsu.csc.itrust.dao.mysql.PatientDAO, edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO, edu.ncsu.csc.itrust.dao.mysql.ReferralDAO, edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO, edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO, edu.ncsu.csc.itrust.dao.mysql.RiskDAO, edu.ncsu.csc.itrust.dao.mysql.SurveyDAO, edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO, edu.ncsu.csc.itrust.dao.mysql.TransactionDAO, edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO, edu.ncsu.csc.itrust.testutils.EvilDAOFactory, edu.ncsu.csc.itrust.testutils.TestDAOFactory\nImplements functionality through methods: getProductionInstance, getConnection, getAccessDAO, getAllergyDAO, getApptDAO, getApptTypeDAO, getAuthDAO, getCPTCodesDAO, getDrugInteractionDAO, getFamilyDAO, getHealthRecordsDAO, getHospitalsDAO, getICDCodesDAO, getNDCodesDAO, getOfficeVisitDAO, getPatientDAO, getPersonnelDAO, getReferralDAO, getRiskDAO, getTransactionDAO, getVisitRemindersDAO, getFakeEmailDAO, getReportRequestDAO, getSurveyDAO, getLabProcedureDAO, getLOINCDAO, getSurveyResultDAO, getMessageDAO, getAdverseEventDAO, getRemoteMonitoringDAO",
  "IConnectionDriver": "IConnectionDriver { public Connection getConnection()IConnectionDriver { public Connection getConnection()throws SQLException; }IConnectionDriver { public IConnectionDriver getConnection()IConnectionDriver { public Connection getConnection()throws SQLException; }IConnectionDriver { public IConnectionDriver getConnection()throws SQLException; }IConnectionDriver { public IConnectionDriver getConnection(){ public IConnectionDriver getConnection() throwsIConnectionDriver { public IConnectionDriver getConnection()throws SQLException\nThis class depends on: java.sql.Connection, java.sql.SQLException\n",
  "ProductionConnectionDriver": "javax.ncsu.csc.itrust.dao;\\n\\npublic class{ public Connection getConnection() throwsException: \" + e.getMessage()); }public void getConnection\nDependencies(Connection connection) throwsException: \" + e.getMessage()); }; } public void getConnection\nDependencies(Connection(Connection connection) throws SQLException {; } public void getConnection\nDependencies(ConnectionConnection connection) throws SQLException {\nThis class depends on: java.sql.Connection, java.sql.SQLException, javax.naming.Context, javax.naming.InitialContext, javax.naming.NamingException, javax.sql.DataSource\nImplements functionality through methods: getConnection",
  "AccessDAO": "{ @link DatabaseAccessDAO } @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO} @class{ @link DatabaseAccessDAO}\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: AccessDAO, getSessionTimeoutMins, setSessionTimeoutMins",
  "AdverseEventDAO": "@param mid The MID of@return A java.util.List<AdverseEventBean> A java.util.List<AdverseEventBean>@throws SQLException @throws DBException @throws@throws SQLException @throws@throws DBException @throws DBException@throws SQLException @throws DBException@throws SQLException @throws DBException@throws SQLException @throws DBException@throws DBException@throws SQLException @throws@throws@throws SQLException @throws\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.text.ParseException, java.text.SimpleDateFormat, java.util.Date, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.AdverseEventBean, edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, java.sql.Timestamp\nImplements functionality through methods: AdverseEventDAO, getReportsFor, addReport, getHCPMID, getReport, removeReport, getPerscriptions, getImmunizations",
  "AllergyDAO": "{ @link AllergyBeanLoader allergyBeanLoader }{ @link AllergyBeanLoader allergyBeanLoader }{ @link AllergyBeanLoader allergyBeanLoader }{ @link AllergyBeanLoader allergyBeanLoader }AllergyBeanLoader } allergyBeanLoader.loadAllergyBeans(pid);AllergyBeanLoader allergyBeanLoader.loadAllergyBeans\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.AllergyBean, edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: AllergyDAO, getAllergies, addAllergy",
  "ApptDAO": "edu.ncsu.csc.itrust.dao.DAOFactory\n\nCode:edu.ncsu.csc.itrust.dao.mysql\nVersion: 1.0.0.0;edu.ncsu.csc.itrust.dao.mysql\nVersion: 1.0.0.0;edu.ncsu.csc.itrust.dao.\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.ApptBean, edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory\nImplements functionality through methods: ApptDAO, getApptsFor, getAllAppts, scheduleAppt",
  "ApptTypeDAO": "ncsu.ncsu.csc.itrust.dao.mysql\nMethods:ncsu.ncsu.csc.itrust.dao.mysql\nMethods:ncsu.ncsu.csc.itrust.dao.mysql\nMethods:ncsu.ncsu.csc.itrust.dao.mysql\nMethods:ncsu.n\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.ApptTypeBean, edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: ApptTypeDAO, getApptTypes, addApptType, editApptType",
  "AuthDAO": "{ @link User } @paramthe user's password as a{ @link User } @paramthe user's password as a{ @link User } @paramthe user's password as a{ @link User } @paramthe user's password as a{ @link User } @paramthe user's password as a@paramthe user's MID as a{ @link User } @paramthe user's\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.RandomPassword, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.enums.Role, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: AuthDAO, addUser, setSecurityQuestionAnswer, getUserName, getUserRole, resetPassword, getSecurityQuestion, getSecurityAnswer, recordLoginFailure, recordResetPasswordFailure, getResetPasswordFailures, getLoginFailures, resetLoginFailuresToZero, checkUserExists",
  "CPTCodesDAO": "@class CPTCodesDAO\n { public CPTCodesDAO\n{ @link CPTCodesDAO } @param{ @link CPTCodesDAO } @param{ @link CPTCodesDAO} @class CPTCodesDAO\n{ @link CPTCodesDAO} @class CPTCodesDAO\n{ @link CPTCodesDAO} @class CPTCodesDAO\n{ @link CPTCodesDAO} @class CPT\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.ProcedureBean, edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: CPTCodesDAO, getAllCPTCodes, getImmunizationCPTCodes, getCPTCode, addCPTCode, updateCode",
  "DrugInteractionDAO": "{ @link@see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438/ucm142438\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.DrugInteractionBean, edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: DrugInteractionDAO, getInteractions, reportInteraction, deleteInteraction",
  "FakeEmailDAO": "{ @link{ @link{ @link{ @link List<Email> emailList =List<Email> emailList = emailBeanLoader.loadList(rs); }{ @link{ @link List<Email> emailList =List<Email> emailList = emailBeanLoader.loadList(rs); }{ @link List<Email>List<Email> emailList = emailBeanLoader.loadList(rs\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.Email, edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: FakeEmailDAO, getAllEmails, getEmailsByPerson, sendEmailRecord, getEmailWithBody",
  "FamilyDAO": "@param pid -@return List<FamilyMemberBean>@throws DBException / public List<FamilyMemberBean>@return List<FamilyMemberBean> public List<FamilyMemberBean> getFamilyMembers(longp1.MotherMID, \" + \"p2.MotherMID=p2.MotherMID,p2.MotherMID=p1.MotherMID, p2.MotherM\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.FamilyMemberBean, edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: FamilyDAO, getParents, getSiblings, getChildren",
  "HealthRecordsDAO": "@param mid The MID of@return A java.util.List<HealthRecord>@throws DBException / public List<HealthRecord>= null ; try {; } catch (SQLExceptionException ex ) {ex ) { throw newException ex ) { throwException ex ) { throwException ex ; }Exception ex ) { throwException ex ; }Exception ex ) { throwException ex ; } catchException ex\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.HealthRecord, edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: HealthRecordsDAO, getAllHealthRecords, add",
  "HospitalsDAO": "HospitalBeanLoader hospitalLoader = new HospitalBeanLoader(factory);HospitalBean hospitalBean = hospitalLoader.getHospitalBean(conn);HospitalBean hospitalBean = hospitalLoader.getHospitalBean(conn);HospitalBean hospitalBean = hospitalBean.getHos\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.HospitalBean, edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: HospitalsDAO, getAllHospitals, getHospital, addHospital, updateHospital, assignHospital, removeHospitalAssignment, removeAllHospitalAssignmentsFrom",
  "ICDCodesDAO": "@classdesc Theof the database. @classdesc Theof the database. @classdesc Theof the database. @classdesc Theof the database. @classdesc Theof the database. @classdesc Theof the database. @classdescof the database. @classdescof the database. @classdescof the database. @classdescof the database. @classdescof the database. @classdesc\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: ICDCodesDAO, getAllICDCodes, getICDCode, addICDCode, updateCode",
  "LabProcedureDAO": "= null; ResultSet= null; ResultSet ResultSet2 == null; ResultSet3 = null;= null; ResultSet4 = null;= null; ResultSet5 = null;= null; ResultSet6 = null;= null; ResultSet7 = null;= null; ResultSet8 = null;= null; ResultSet9 = null;= null; ResultSet9 = null;= null; ResultSet9 = null;= null;\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: LabProcedureDAO, getLabProceduresForPatient, getLabProceduresForPatientForNextMonth, getLabProcedure, getAllLabProceduresDate, getAllLabProceduresForDocOV, getAllLabProceduresForDocOV, getAllLabProcedures, getLabProceduresForLHCPForNextMonth, addLabProcedure, updateLabProcedure, getAllLabProceduresLOINC, updateRights",
  "LOINCDAO": "@throws DBException @throws iTrustException /@throws DBException @throws iTrustException@throws iTrustException / public void{ LOINCLoader.addLOINC(LOINCbean hosp); }@throws iTrustException / public void{ LOINCLoader.addLOINC(LOINCbean hosp); }@throws iTrustException / public void{ LOINCLoader.addLOINC(LOINCbean hosp\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.LOINCbean, edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: LOINCDAO, addLOINC, getProcedures, update, getAllLOINC",
  "MessageDAO": "@class MessageDAO\n { public MessageDAO\n(DAOFactory{ @link MessageBeanLoader mbLoader; }{ @link MessageBeanLoader mbLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader }{ @link MessageBeanLoader\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.MessageBean, edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: MessageDAO, getMessagesFor, getMessagesTimeAscending, getMessagesNameAscending, getMessagesNameDescending, getMessagesFrom, getMessagesFromTimeAscending, getMessagesFromNameAscending, getMessagesFromNameDescending, addMessage, updateRead",
  "NDCodesDAO": "@class NDCodesDAO\n { public{ return new NDCodesDAO () ; } public NDCodesDAO\n{ return new NDCodesDAO\n () ; } public NDCodesDAO\n{ return new NDCodesDAO (; } public NDCodesDAO\n ({ return new NDCodesDAO () ; } public NDCodesDAO\n{ return new NDCodesDAO\n (\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.MedicationBean, edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: NDCodesDAO, getAllNDCodes, getNDCode, addNDCode, updateCode",
  "OfficeVisitDAO": "to the database, that is,the database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, oneof\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.text.SimpleDateFormat, java.util.Date, java.util.List, java.util.ArrayList, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.beans.OfficeVisitBean, edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.beans.PrescriptionReportBean, edu.ncsu.csc.itrust.beans.ProcedureBean, edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader, edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader, edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader, edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader, edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: OfficeVisitDAO, add, update, getOfficeVisit, getProcedures, getPrescriptions, getDiagnoses, addProcedureToOfficeVisit, removeProcedureFromOfficeVisit, addPrescription, editPrescription, removePrescription, addDiagnosisToOfficeVisit, removeDiagnosisFromOfficeVisit, addLabProcedureToOfficeVisit, removeLabProcedureFromOfficeVisit, checkOfficeVisitExists, getAllOfficeVisits, getAllOfficeVisitsForLHCP, getOfficeVisitsWithNoSurvey, getOfficeVisitsFromHospital, getAllOfficeVisitsForDiagnosis",
  "PatientDAO": "the database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe database, that is, onethe\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, java.util.Vector, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.beans.ProcedureBean, edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader, edu.ncsu.csc.itrust.beans.loaders.PatientLoader, edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader, edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader, edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.DateUtil\nImplements functionality through methods: PatientDAO, getName, getRole, addEmptyPatient, getPatient, editPatient, checkPatientExists, getDeclaredHCPs, declareHCP, undeclareHCP, checkDeclaredHCP, getRepresented, getRepresenting, represents, addRepresentative, removeRepresentative, getDiagnoses, getProcedures, getImmunizationProcedures, getPrescriptions, getCurrentPrescriptions, getExpiredPrescriptions, getAllPatients, getRenewalNeedsPatients, searchForPatientsWithName",
  "PersonnelDAO": "{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO } @class{ @link PersonnelDAO }\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.Vector, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.HospitalBean, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.beans.PrescriptionBean, edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader, edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException, edu.ncsu.csc.itrust.enums.Role\nImplements functionality through methods: PersonnelDAO, getName, addEmptyPersonnel, getPersonnel, editPersonnel, checkPersonnelExists, getHospitals, getAllPersonnel, getUAPsForHCP, getPrescribingDoctor, searchForPersonnelWithName",
  "ReferralDAO": "{ @link ReferralBeanLoader referralLoader; }{ @link ReferralBeanLoader referralLoader }{ @link ReferralBeanLoader }@throws DBException / public List<ReferralBean>{ @link ReferralBeanLoader}@throws DBException / public List<ReferralBean>{ @link ReferralBeanLoader}@throws DBException / public List<ReferralBean>= null ; try {; } catch\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.ReferralBean, edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: ReferralDAO, getReferralsSentFrom, getReferralsSentTo, editReferral, addReferral",
  "RemoteMonitoringDAO": "{ @link@param loggedInMID The@return List<RemoteMonitoringDataBean> @throws DBException@throws DBException / public List<RemoteMonitoringDataBean>@throws DBException / public List<RemoteMonitoringDataBean>@throws DBException / public List<RemoteMonitoringDataBean>@throws DBException / public List<RemoteMonitoringDataBean>@throws DBException / public List<RemoteMonitoringDataBean>@return List<RemoteMonitoringData\nThis class depends on: java.sql.Connection, java.util.Date, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.sql.Timestamp, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean, edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.iTrustException\nImplements functionality through methods: RemoteMonitoringDAO, getPatientsData, getPatientDataByDate, addPatientToList, removePatientFromList",
  "ReportRequestDAO": "@param id The unique ID@return The bean describing this@throws DBException / public void( ) { if () throw new DBException(); }@param id The unique ID@return The bean describing this@throws DBException / public void( ) { if () throw new DBException(); }@param id The unique ID@return The bean describing this@return The bean describing this@throws DBException / public ReportRequestDAO\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.Date, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.ReportRequestBean, edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: ReportRequestDAO, getReportRequest, getAllReportRequestsForRequester, getAllReportRequestsForPatient, getAllReportRequests, addReportRequest, approveReportRequest, rejectReportRequest, setViewed",
  "RiskDAO": "@class RiskDAO\n { public RiskDAO\n{ return new RiskDAO\n (, icdLower, icdUpper ) ; }{ return new RiskDAO\n (, icdLower, icdUpper ) ; }@throws DBException / public RiskDAO\n{ return new RiskDAO\n (, icdLower , icdUpper ){ return new RiskDAO\n () ;\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.FamilyMemberBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: RiskDAO, hasFamilyHistory, hadChildhoodInfection, hasSmoked",
  "SurveyDAO": "@param surveyBean The Bean representing@param date The date thethe survey was completed.@param date The date thesurvey was completed.@param date The date thesurvey was completed. / publicsurveyBean, Date date) {surveyBean, Date date) {surveyBean, Date date) {surveyBean, Date date) {; } catch (Exception e){ throw new DBException(e.getMessage(),\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.Date, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.SurveyBean, edu.ncsu.csc.itrust.beans.loaders.SurveyLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: SurveyDAO, addCompletedSurvey, getSurveyData, isSurveyCompleted",
  "SurveyResultDAO": "@param sql The SQL@return A java.util.List<SurveyResultBean> @throws DBException@throws DBException / public List<SurveyResultBean>@throws DBException / public List<SurveyResultBean>new StringBuffer ( ) ;. append () ;( ) ;( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ;\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.SQLException, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.SurveyResultBean, edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: SurveyResultDAO, getSurveyResultsForZip, getSurveyResultsForHospital",
  "TransactionDAO": "{ @link TransactionBean } @see@see TransactionBeanLoader / public TransactionBean{ @link TransactionBean } @see@see TransactionBeanLoader / public TransactionBean{ @link TransactionBean } @see@see TransactionBeanLoader / public TransactionBean{ @link TransactionBean } @see@see TransactionBeanLoader / public TransactionBean{ @link TransactionBean } @see@see TransactionBeanLoader / public TransactionBeanTransactionBean\nThis class depends on: java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.sql.Timestamp, java.sql.Date, java.util.List, edu.ncsu.csc.itrust.DBUtil, edu.ncsu.csc.itrust.beans.OperationalProfile, edu.ncsu.csc.itrust.beans.TransactionBean, edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader, edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.enums.TransactionType, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: TransactionDAO, getAllTransactions, logTransaction, getAllRecordAccesses, getTransactionsFor, getRecordAccesses, getOperationalProfile",
  "BloodType": "public static BloodType parse(String bloodTypeStr)return NS; } public staticString name; private BloodType(String name)public static BloodType parse(String bloodTypeStr)String name; private BloodType(String name)name; private BloodType(String name) {name); } public static BloodTypename; private BloodType(String\nImplements functionality through methods: getName, toString, parse",
  "Ethnicity": "public static Ethnicity parse(String input){ for (Ethnicity ethnicity{ if (ethnicity.name.equals(input)) return ethnicity;public static Ethnicity parse(String input){ for (Ethnicity ethnicity:ethnicity: Ethnicity.values()) { if (ethnicity.name.equals(input))return ethnicity; }\nImplements functionality through methods: getName, toString, parse",
  "Gender": "public static Gender parse(String input)return name; }public static Gender parse(String input) {return NotSpecified; }public static Gender parse(String input) {returnreturn NotSpecified; }public static Gender parse(String input) {return NotSpecified; }public static Gender parse(String input) {return NotSpecified; }public static Gender parse(String input) {return\nImplements functionality through methods: getName, toString, parse",
  "PrescriptionAlerts": "Tetracycline(\"Tetracycline\", \"009042407\"), Prioglitazone(\"Prioglitazone\", \"647641512\"); private\"009042407\"), Prioglitazone(\"Prioglitazone\", \"647641512\"); privateprivate String name; privateprivate String NDCode; private PrescriptionAlerts(String rName,String r\nImplements functionality through methods: getName, getNDCode, isAlert",
  "Role": "\"Personnel\"), \n\tUAP(\"uap\", \"Personnel\"), \n\tPHA(\"pha\", \"Personnel\"),\"Personnel\"), \n\tTESTER(\"tester\", \"\");public static Role parse(String str){ for (Role rolevalues()) { if ( role.userRolesString.equals(str)){ if (role.dbTable.equals(str)) return role;return role;\nImplements functionality through methods: getDBTable, getUserRolesString, parse",
  "State": ") { return name ;; } public State () { this . name; } public State () { this . name; } public State (( String name ) {; } public State (( String name ) {; } public State (( String name ) {; } public State () { this . name; } public State () { this . name; } public State ((\nImplements functionality through methods: getName, getAbbrev, toString, parse",
  "TransactionType": ") ; public TransactionType) ; public TransactionType) ; public TransactionType) ; public TransactionType) ; public TransactionType; public TransactionType) ; public TransactionType) ; } public TransactionType; public TransactionType) ; public TransactionType; public TransactionType; public TransactionType) ; } public TransactionType) ; } }\nImplements functionality through methods: getCode, getDescription, parse",
  "DBException": "@author Andy / publicException that was responsible forexception has occurred. Please seethe log in the consolestacktrace. / public{ if (sqlException != null)return super.getExtendedMessage(); } @Override public{ if (sqlException != null)return super.getExtendedMessage(); } @Override public{ if (sqlException != null)return sqlException.getMessage(); elsereturn super.getExtendedMessage\nThis class depends on: java.sql.SQLException\nImplements functionality through methods: DBException, getSQLException, getExtendedMessage",
  "ErrorList": "* @author Andy* @author Andy@author Andy * @author Andy@author Andy * @author Andy@author Andy * @author Andy@author Andy * @author Andy@author Andy * @author Andy@author Andy * @author* @author Andy* @author Andy * @author* @author Andy * @author* @author\nThis class depends on: java.util.ArrayList, java.util.Iterator, java.util.List\nImplements functionality through methods: ErrorList, addIfNotNull, getMessageList, hasErrors, toString, iterator",
  "FormValidationException": "javax.servlet.jsp.JspWriter\nPackage: edu.ncsu.csc.itrust.exception;\nVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersionVersion\nThis class depends on: java.io.IOException, java.util.List, javax.servlet.jsp.JspWriter\nImplements functionality through methods: FormValidationException, FormValidationException, getErrorList, getMessage, printHTML",
  "iTrustException": "public iTrustException(String message) { this.messageThe typical constructor. @param messageA message to be displayedto the screen.@Override public String getExtendedMessage(String message){ if (message == null)return \"An error has occurred.return \"An error has occurred.@Override public String getExtendedMessage(String message)@Override public String getExtendedMessage(String message){ if (message ==\nImplements functionality through methods: iTrustException, getMessage, getExtendedMessage",
  "NoHealthRecordsException": "final long serialVersionUID = 7082694071460355325L;final long serialVersionUID = 7082694071460355325L;iTrustException { public NoHealthRecordsException () { super(MESSAGE); } }NoHealthRecordsException ( ) {) { super(MESSAGE); } }exception: NoHealthRecordsExceptionExceptionexception: NoHealthRecordsExceptionExceptionexception: NoHealthRecordsExceptionException\nImplements functionality through methods: NoHealthRecordsException",
  "ChronicDiseaseMediator": "riskCheckers = new ArrayList<RiskChecker>();riskCheckers = new ArrayList<RiskChecker>();riskCheckers = new ArrayList<RiskChecker>();= new ArrayList<RiskChecker>(); for (RiskCheckerriskCheckers) { if (diseaseChecker.isAtRisk()) diseases.add(diseaseChecker);riskCheckers.add(new HeartDisease\nThis class depends on: java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException\nImplements functionality through methods: ChronicDiseaseMediator, getDiseaseAtRisk",
  "HeartDiseaseRisks": "{@link HeartDiseaseRisksRisk} for{@link HeartDiseaseRisksRisk} for{@link HeartDiseaseRisksRisk} for{@link HeartDiseaseRisksRisk} for{@link HeartDiseaseRisksRisk} for the given{@link HeartDiseaseRisksRisk} for the given{@link\nThis class depends on: static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican, static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian, static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.enums.Gender, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.risk.factors.AgeFactor, edu.ncsu.csc.itrust.risk.factors.CholesterolFactor, edu.ncsu.csc.itrust.risk.factors.EthnicityFactor, edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor, edu.ncsu.csc.itrust.risk.factors.GenderFactor, edu.ncsu.csc.itrust.risk.factors.HypertensionFactor, edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor, edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor, edu.ncsu.csc.itrust.risk.factors.SmokingFactor, edu.ncsu.csc.itrust.risk.factors.WeightFactor\nImplements functionality through methods: HeartDiseaseRisks, qualifiesForDisease, getName",
  "RiskChecker": "abstract public void checkRisk () { if (currentHealthRecord.isAtRisk())return false; } public void( ) {( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ; } public( ) { this .( ) ;\nThis class depends on: java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.beans.HealthRecord, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor\nImplements functionality through methods: RiskChecker, isAtRisk, getPatientRiskFactors",
  "Type1DiabetesRisks": "{ @link} @Override public void( ) { if () { throw new} @Override public( ) { throw new} @Override public( ) { throw new} @Override public( ) { throw new} @Override public( ) { throw new} @Override public( ) { throw new} @Override public( ) { throw new( ) ; }( ) ; }\nThis class depends on: java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.enums.Ethnicity, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor, edu.ncsu.csc.itrust.risk.factors.EthnicityFactor, edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor, edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor\nImplements functionality through methods: qualifiesForDisease, getName",
  "Type2DiabetesRisks": "{ super (DAOFactory); } public{ super (DAOFactory); } public{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }{ super (DAOFactory); }\nThis class depends on: static edu.ncsu.csc.itrust.enums.Ethnicity.AfricanAmerican, static edu.ncsu.csc.itrust.enums.Ethnicity.AmericanIndian, static edu.ncsu.csc.itrust.enums.Ethnicity.Asian, static edu.ncsu.csc.itrust.enums.Ethnicity.Hispanic, java.util.ArrayList, java.util.List, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException, edu.ncsu.csc.itrust.exception.NoHealthRecordsException, edu.ncsu.csc.itrust.risk.factors.AgeFactor, edu.ncsu.csc.itrust.risk.factors.CholesterolFactor, edu.ncsu.csc.itrust.risk.factors.EthnicityFactor, edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor, edu.ncsu.csc.itrust.risk.factors.HypertensionFactor, edu.ncsu.csc.itrust.risk.factors.PatientRiskFactor, edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor, edu.ncsu.csc.itrust.risk.factors.WeightFactor\nImplements functionality through methods: qualifiesForDisease, getName",
  "AgeFactor": "public AgeFactor(PatientBean patient, int age){ this.patient = patient;public boolean hasFactor(PatientBean patient, int{ this.patient = patient;} public{ this.patient = patient;} public{ this.patient = patient;} public{ this.patient.getAge() > age; }public{ this.patient.getAge() >\nThis class depends on: edu.ncsu.csc.itrust.beans.PatientBean\nImplements functionality through methods: AgeFactor, getDescription, hasFactor",
  "ChildhoodInfectionFactor": "* @author Andy* @author Andy* @author Andy@author Andy/ public class{{ return factory.getRiskDAO().hadChildhoodInfection(patientID, icdCodes); }{ return factory.getRiskDAO().hadChildhoodInfection(patientID, icdCodes); }{ return factory.getRiskDAO().hadChildhoodInfection(pat\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: ChildhoodInfectionFactor, getDescription, hasFactor",
  "CholesterolFactor": "{ @link CholesterolFactor}{ @link CholesterolFactor(HealthRecord currentHealthRecord){ @link CholesterolFactor(HealthRecord currentHealthRecord){ @link CholesterolFactor(HealthRecord currentHealthRecord){ @link CholesterolFactor(HealthRecord currentHealthRecord){ @link CholesterolFactor(HealthRecord currentHealthRecord){ @link Cholesterol\nThis class depends on: edu.ncsu.csc.itrust.beans.HealthRecord\nImplements functionality through methods: CholesterolFactor, getDescription, hasFactor",
  "EthnicityFactor": "{ @link{ @link{ @link Ethnicity}{ @link Ethnicity}{ @link Ethnicity} public{ @link Ethnicity} public{ @link Ethnicity} public{ @link Ethnicity} public{ @link Ethnicity} public{ @link Ethnicity} public{ @link Ethnicity} public void\nThis class depends on: edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.enums.Ethnicity\nImplements functionality through methods: EthnicityFactor, getDescription, hasFactor",
  "FamilyHistoryFactor": "{ @link{ @link{ @link{ @link{ @link{ @link{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for details{ @link\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: FamilyHistoryFactor, getDescription, hasFactor",
  "GenderFactor": "@param {PatientBean} patient@param {Gender} gender@param {Gender} gender@param {String} description@param {String} description description@param {String} description description@param {String} description description@param {String} description description description@param {String} description description description@param {String} description description description@param {String} description description description@param {String}\nThis class depends on: edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.enums.Gender\nImplements functionality through methods: GenderFactor, getDescription, hasFactor",
  "HypertensionFactor": "{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for\nThis class depends on: edu.ncsu.csc.itrust.beans.HealthRecord\nImplements functionality through methods: HypertensionFactor, getDescription, hasFactor",
  "PatientRiskFactor": "{ private Boolean hasRisk =null; @return A textual descriptionof what the patient's statusis that's causing the risk.@return A textual description ofthe patient's status is that'sthe patient's status is that'sthe patient's status is that'sincreased risk.@return A textual description ofthe patient's status is that'sthe patient's status is that'sincreased risk.\nImplements functionality through methods: hasRiskFactor",
  "PriorDiagnosisFactor": "{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link{ @link PatientRiskFactor}{ @link PatientRiskFactor} for details\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: PriorDiagnosisFactor, getDescription, hasFactor",
  "SmokingFactor": "{ @link{ @link{ @link{ @link{ @link{ @link PatientRiskFactor}{ @link PatientRiskFactor}{ @link PatientRiskFactor}{ @link PatientRiskFactor}{ @link PatientRiskFactor}{ @link PatientRiskFactor}{ @link PatientRiskFactor}{ @link PatientRisk\nThis class depends on: edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: SmokingFactor, getDescription, hasFactor",
  "WeightFactor": "{ @link{ @link{ @link{ @link{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for details{ @link PatientRiskFactor} for details\nThis class depends on: edu.ncsu.csc.itrust.beans.HealthRecord\nImplements functionality through methods: WeightFactor, getDescription, hasFactor",
  "SessionTimeoutListener": "javax.servlet.http.HttpSession, javax.servlet.http.HttpSessionListener,javax.servlet.http.HttpSessionEvent, javax.servlet.http.HttpSessionListener,javax.servlet.http.HttpSession, javax.servlet.http.HttpSessionListener,javax.servlet.http.HttpSession, javax.servlet.http.HttpSessionListener,javax.servlet.http.HttpSession, javax.servlet.http.Http\nThis class depends on: javax.servlet.http.HttpSession, javax.servlet.http.HttpSessionEvent, javax.servlet.http.HttpSessionListener, edu.ncsu.csc.itrust.dao.DAOFactory, edu.ncsu.csc.itrust.exception.DBException\nImplements functionality through methods: SessionTimeoutListener, SessionTimeoutListener, sessionCreated, sessionDestroyed",
  "ICD9CMLink": "javax.ncsu.csc.itrust.tags\nPackage: edu.ncsu.csc.itrust.tags\nDescription: ICD9CMLink, doStartTag,public void doStartTag(JspWriter out) {out.write(\"<a href=\\\"http://icd9cm.chrisendres.com/2007/index.php?srchtype=diseases&srchtext\nThis class depends on: java.io.IOException, javax.servlet.jsp.JspException, javax.servlet.jsp.JspWriter, javax.servlet.jsp.PageContext, javax.servlet.jsp.tagext.Tag\nImplements functionality through methods: ICD9CMLink, doStartTag, doEndTag, release, setPageContext, setParent, getParent, getCode, setCode, setCode",
  "PatientNavigation": "{ this.pageContext = pageContext;} public voidpageContext.getOut(); } public voidpageContext.getOut(); } public voidpageContext.getOut(); } public voidpageContext.getOut();pageContext.getOut(); } public voidpageContext.getOut(); } public voidpageContext.getOut(); } public voidpageContext.getOut(); } public voidpageContext.getOut(); }\nThis class depends on: java.io.IOException, javax.servlet.jsp.JspException, javax.servlet.jsp.JspWriter, javax.servlet.jsp.PageContext, javax.servlet.jsp.tagext.Tag\nImplements functionality through methods: PatientNavigation, doStartTag, doEndTag, release, setPageContext, setParent, getParent, getThisTitle, setThisTitle",
  "StateSelect": "javax.ncsu.csc.itrust.enums.State; public class StateSelect\n {public void setValue\nDependencies(State state) {state.toString().equals(getValue()) ? \"selected=selected\" : \"\";public void setValue\nDependencies(State state) {state.toString().equals(getValue()) ? \"selected=selected\" : \"\";public void setValue\nDependencies(State state) {state.toString\nThis class depends on: java.io.IOException, javax.servlet.jsp.JspException, javax.servlet.jsp.JspWriter, javax.servlet.jsp.PageContext, javax.servlet.jsp.tagext.Tag, edu.ncsu.csc.itrust.enums.State\nImplements functionality through methods: StateSelect, doStartTag, doEndTag, release, setPageContext, setParent, getParent, getName, setName, getValue, setValue",
  "AddPatientValidator": "@param p A bean ofthe type of validator.@param p A bean of@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean of@param p A bean of@param p A bean of@param p A bean of@param p A bean of@param p A bean of@param p A bean of@param\nThis class depends on: edu.ncsu.csc.itrust.action.AddPatientAction, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: AddPatientValidator, validate",
  "AddPersonnelValidator": "public void validate ( PersonnelBean) { if (checkFormat(\"Firstname, last name, email, false);{ if (checkFormat(\"First name\", p.getFirstName(),false); if (checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME,false); if (checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL,{ if (checkFormat(\"First name\", p.get\nThis class depends on: edu.ncsu.csc.itrust.action.AddPatientAction, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: AddPersonnelValidator, validate",
  "AdverseEventValidator": "@param d A bean ofthe type of validator.@param d A bean of@param d A bean ofthe type of validator.@param d A bean of@param d A bean of@param d A bean of@param d A bean@param d A bean of@param d A bean of@param d A bean of@param d A bean of@param d A bean of@param\nThis class depends on: edu.ncsu.csc.itrust.beans.AdverseEventBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: AdverseEventValidator, validate",
  "AllergyBeanValidator": "@param m A bean ofthe type of validator.@param m A bean of@param m A bean ofthe type of validator.@param m A bean of@param m A bean of@param m A bean of@param m A bean of@param m A bean of@param m A bean of@param m A bean of@param m A bean of@param m A bean of@\nThis class depends on: edu.ncsu.csc.itrust.action.EditOfficeVisitAction, edu.ncsu.csc.itrust.beans.AllergyBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: AllergyBeanValidator, validate",
  "ApptBeanValidator": "if (bean.hasErrors()) {errorList.add(bean.getErrors());}{ if (bean.hasErrors()) {throw new FormValidationException(errorList.getErrors()); } }{ throw new FormValidationException(errorList.getErrors()); }{ throw new FormValidationException(errorList.getErrors()); }{ throw new{ throw new FormValidationException(errorList.getErrors()); }\nThis class depends on: edu.ncsu.csc.itrust.beans.ApptBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: validate",
  "ApptTypeBeanValidator": "validate\nMethods(ApptTypeBean a) throws FormValidationException{} public void validate\nDependencies(ApptTypeBean a){ throw new; } public void validate\nDependencies(ApptTypeBean{ throw new FormValidationException(a); }{ throw new FormValidationException(a); }{ throw new FormValidationException(a); }\nThis class depends on: edu.ncsu.csc.itrust.beans.ApptTypeBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: validate",
  "BeanValidator": "String errorMessage =name + \": \" +isEmpty or a Java null.isEmpty ora Java null. Otherwise, anerror message will be returned.isEmpty or a Java null.{ @link ErrorList}. @param name@param format @param isNullable @returnString checkFormat(String name, Stringformat, boolean isNullable) {String str = \"\"; ifnull) str = String.valueOf(value);\nThis class depends on: edu.ncsu.csc.itrust.enums.Gender, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\n",
  "DiagnosisBeanValidator": "* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author Andy* @author\nThis class depends on: edu.ncsu.csc.itrust.beans.DiagnosisBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: DiagnosisBeanValidator, validate",
  "DrugInteractionValidator": "@param d A bean oftype of validator.@param d A bean ofthe type of validator.@param d A beanof the type of validator.@param d A bean oftype of validator.@Override public void validate(DrugInteractionBean d)@Override public void validate(DrugInteractionBean d)@Override public void validate(DrugInteractionBean d)@Override public void validate(Drug\nThis class depends on: edu.ncsu.csc.itrust.beans.DrugInteractionBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: DrugInteractionValidator, validate",
  "EditOfficeVisitValidator": ") { if ( validatePrescription) {) ; } else {) ; } else {) ; } }) ; } }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }( ) ; }\nThis class depends on: java.text.ParseException, java.text.SimpleDateFormat, java.util.Date, edu.ncsu.csc.itrust.action.EditOfficeVisitAction, edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: EditOfficeVisitValidator, EditOfficeVisitValidator, validate",
  "EMailValidator": "@param m A bean ofthe type of validator.@param m A bean of@param m A bean ofthe type of validator.@param m A bean ofthe type of validator.@param m A bean ofthe type of validator.@param m A bean ofthe type of validator.@param m A bean of@param m A bean ofthe type of validator.@param m A\nThis class depends on: edu.ncsu.csc.itrust.beans.MessageBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: EMailValidator, validate",
  "HealthRecordFormValidator": "@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean oftype of validator. @param p@param p A bean ofthe type of validator.@param p A bean oftype of validator. @param@param p A bean ofthe type of validator.@param p\nThis class depends on: edu.ncsu.csc.itrust.action.EditHealthHistoryAction, edu.ncsu.csc.itrust.beans.forms.HealthRecordForm, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: validate",
  "HospitalBeanValidator": "HospitalBean h ) { if{ if (checkFormat(\"Hospital ID\", h.getHospitalID(), ValidationFormat.HOSPITAL_ID,{ if (checkFormat(\"Hospital Name\", h.getHospitalName(), ValidationFormat.HOSPITAL_NAME,{ if (checkFormat(\"Hospital ID\", h.getHospitalID(),(\nThis class depends on: edu.ncsu.csc.itrust.action.UpdateHospitalListAction, edu.ncsu.csc.itrust.beans.HospitalBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: HospitalBeanValidator, validate",
  "LabProcedureValidator": "LabProcedureBean b) { if (b.getLoinc()b.getLoinc(), ValidationFormat.LAB_STATUS, false); if (b.getLoinc()b.getLoinc(), ValidationFormat.LAB_RIGHTS, false); if (b.getLoinc().getRegex().matcher(b.getLoinc().matcher(b.getLoinc().getRegex())) return\nThis class depends on: edu.ncsu.csc.itrust.beans.LabProcedureBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: validate",
  "LOINCBeanValidator": "ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean,ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean, ValidationFormat.LOINCbean,ValidationFormat.LOINCbean, ValidationFormat.LO\nThis class depends on: edu.ncsu.csc.itrust.beans.LOINCbean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: LOINCBeanValidator, validate",
  "MailValidator": "@param p A bean oftype of validator.@param p A bean@param p A bean@param p A bean@param p A bean@param p A bean@param p A bean@param p A bean@param p A bean of@param p A bean of@param p A bean of@param p A bean of@param p A bean of@param p A bean@param\nThis class depends on: edu.ncsu.csc.itrust.exception.FormValidationException, org.apache.commons.validator.*\nImplements functionality through methods: MailValidator, validateEmail",
  "MedicationBeanValidator": "Edu.ncsu.csc.itrust.action.UpdateNDCodeListAction,Edu.ncsu.csc.itrust.action.UpdateNDCodeListAction, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException:Edu.ncsu.csc.itrust\nThis class depends on: edu.ncsu.csc.itrust.action.UpdateNDCodeListAction, edu.ncsu.csc.itrust.beans.MedicationBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: MedicationBeanValidator, validate",
  "MessageValidator": "{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction}{ @link EditOfficeVisitAction\nThis class depends on: edu.ncsu.csc.itrust.action.EditOfficeVisitAction, edu.ncsu.csc.itrust.beans.MessageBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: MessageValidator, validate",
  "PatientValidator": ") { if ( p) { errorList . addIfNotNulldate cannot be beforedate!\"); } if ( p) { errorList.addIfNotNull(\"Birth date cannotdate!\"); } if ( pp.getFirstName(), ValidationFormat.NAME, false)); } ifp.getLastName(), ValidationFormat.NAME, false)); } ifp.getFirstName(), ValidationFormat.NAME, false)); ifp.get\nThis class depends on: edu.ncsu.csc.itrust.action.EditPatientAction, edu.ncsu.csc.itrust.beans.PatientBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException, org.apache.commons.validator.CreditCardValidator, java.util.Date\nImplements functionality through methods: PatientValidator, validate",
  "PersonnelValidator": "@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@param p A bean of\nThis class depends on: edu.ncsu.csc.itrust.action.EditPersonnelAction, edu.ncsu.csc.itrust.beans.PersonnelBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: PersonnelValidator, validate",
  "ProcedureBeanValidator": "{ @link ProcedureBeanValidator\nPackage:{ @link ProcedureBeanValidator\nPackage: ProcedureBeanValidator, validate\nDependencies:{ @link ProcedureBeanValidator\nPackage:{ @link ProcedureBeanValidator\nPackage:{ @link ProcedureBeanValidator\nPackage: ProcedureBeanValidator, validate\nDependencies:{ @link ProcedureBeanValidator\nPackage: ProcedureBeanValidator, validate\nDependencies:{ @link ProcedureBeanValidator\nPackage: ProcedureBeanValidator,\nThis class depends on: edu.ncsu.csc.itrust.action.UpdateNDCodeListAction, edu.ncsu.csc.itrust.beans.ProcedureBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: ProcedureBeanValidator, validate",
  "RemoteMonitoringDataBeanValidator": "{ @code public void validate(RemoteMonitoringDataBean) { if (m.getSystolicBloodPressure(){ if (m.getDiastolicBloodPressure() == null){ if (m.getSystolicBloodPressure() == null){ if (m.getSystolicBloodPressure() == null){ if (m.getDiastolicBloodPressure() ==\nThis class depends on: edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction, edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: RemoteMonitoringDataBeanValidator, validate",
  "SecurityQAValidator": "ValidationFormat.ANSWER, false);  @) { if (null) throw new FormValidationException(errorList); }{ if (null == bean.getQuestion())new FormValidationException(errorList); if (null) throw new FormValidationException(errorList); }{ if (null == bean.getConfirmationAnswer())new FormValidationException(errorList); } if (null) throw new FormValidationException(errorList); }\nThis class depends on: edu.ncsu.csc.itrust.action.SetSecurityQuestionAction, edu.ncsu.csc.itrust.beans.SecurityQA, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: validate",
  "SurveySearchValidator": "@Override public void validate(SurveyResultBean bean)@param p A bean ofthe type of validator.@param p A bean ofthe type of validator.@Override public void validate(SurveyResultBean bean)@Override public void validate(SurveyResultBean bean)@Override public void validate(SurveyResultBean@Override public void validate(SurveyResultBean@Override public void validate(SurveyResultBean@Override public void validate\nThis class depends on: edu.ncsu.csc.itrust.beans.SurveyResultBean, edu.ncsu.csc.itrust.exception.ErrorList, edu.ncsu.csc.itrust.exception.FormValidationException\nImplements functionality through methods: validate",
  "ValidationFormat": "andand space\"), VALIDATION_FORMATS : [, VALIDATION_FORMATS, VALIDATION_FORMATS , VALIDATION_FORMATS, VALIDATION_FORMATS , VALIDATION_FORMATS, VALIDATION_FORMATS , VALIDATION_FORMATS, VALIDATION_FORMATS , VALIDATION_FORMATS, VALIDATION_FORMATS , VALIDATION_FORMATS, VALIDATION_FORMATS , VALIDATION_FORMAT\nThis class depends on: java.util.regex.Pattern\nImplements functionality through methods: getRegex, getDescription"
}